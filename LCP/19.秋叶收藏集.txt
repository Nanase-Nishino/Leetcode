//动态规划
//红黄红:012
//注意:叶子数量>=状态数量
//f[i][j]:第i片叶片调整至j状态时的最小操作数
//f[i][0]=f[i-1][0]+isYellow(i)
//f[i][1]=min(f[i-1][0],f[i-1][1])+isRed(i)
//f[i][2]=min(f[i-1][1],f[i-1][2])+isYellow(i) i>=2

class Solution {
public:
    int minimumOperations(string leaves) {
        int N=leaves.size();
        vector<vector<int>> f(N,vector<int>(3));
        f[0][0]=(leaves[0]=='y');
        f[0][1]=f[0][2]=f[1][2]=INT_MAX;
        for(int i=1;i<N;i++){
            int isRed=(leaves[i]=='r');
            int isYellow=(leaves[i]=='y');
            f[i][0]=f[i-1][0]+isYellow;
            f[i][1]=min(f[i-1][0],f[i-1][1])+isRed;
            if(i>=2)
                f[i][2]=min(f[i-1][1],f[i-1][2])+isYellow;
        }
        return f[N-1][2];
    }
};


//