//Dynamic Programming
//dp[i][j] means that the maximum of dot product of substring from i to j.
//dp[i][j]=max(dp[i-1][j-1]+nums1[i][j]*nums2[i][j],dp[i-1][j],dp[i][j-1]).

class Solution {
public:
    int maxDotProduct(vector<int>& nums1, vector<int>& nums2) {
        const int len1=nums1.size(),len2=nums2.size();
        int dp[500+5][500+5];
        for(int i=0;i<=len1;i++)
            for(int j=0;j<=len2;j++)
                dp[i][j]=-1000*1000*500;
        for(int i=1;i<=len1;i++)
            for(int j=1;j<=len2;j++)
            {
                dp[i][j]=nums1[i-1]*nums2[j-1];
                dp[i][j]=max(dp[i][j],dp[i-1][j-1]+dp[i][j]);
                dp[i][j]=max(dp[i-1][j],dp[i][j]);
                dp[i][j]=max(dp[i][j-1],dp[i][j]);
            }
        return dp[len1][len2];
    }
};