//dynamic planning from back to front
//windowing
//dp function:days[i]+1/7/30>days[j] cover the previous ticket
//dp function2: min(1,7,30)
//the front decision depends on the back decision
//memo and recursion

class Solution {
private:
    vector<int> costs,days,memo;
    int duration[3]={1,7,30};
public:
    int mincostTickets(vector<int>& days, vector<int>& costs) {
        this->costs=costs;
        this->days=days;
        memo.assign(days.size(),-1);
        return dp(0);
    }
    int dp(int i)
    {
        if(i>=days.size())
            return 0;
        if(memo[i]!=-1)
            return memo[i];
        memo[i]=INT_MAX;
        int j=i;
        for(int k=0;k<3;k++)
        {
            while(j<days.size()&&days[j]<days[i]+duration[k])
                j++;
            memo[i]=min(memo[i],dp(j)+costs[k]);
        }
        return memo[i];
    }
};