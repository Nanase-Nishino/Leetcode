class Solution {
public:
    string addBinary(string a, string b) {
        string res;
        int N=max(a.size(),b.size());
        int carry=0;
        reverse(a.begin(),a.end());
        reverse(b.begin(),b.end());
        for(int i=0;i<N;i++)
        {
            carry+= i<a.size()?a[i]-'0':0;
            carry+= i<b.size()?b[i]-'0':0;
            res+= carry%2?'1':'0';
            carry/=2;
        }
        if(carry)
            res+='1';
        reverse(res.begin(),res.end());
        return res;
    }
};

// 位运算
// x保存结果 answer=x^y
// y保存进位 carry=(x&y)<<1
// answer的最后一位是第一轮的x和y无进位相加的结果
// carry的倒数第二位是第一轮x和y相加的进位 最后一位补零 不影响后面相加
// 所以 在计算过程中 每一轮都可以得到一个低i位的答案 和向低i位的进位！

//这题c++在很大的二进制时会溢出