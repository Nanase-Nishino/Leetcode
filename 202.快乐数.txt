//弗洛伊德循环 在一个循环中 设置快慢指针 
//若有循环 则快慢指针最终会相遇
//若无循环 快指针会到达最终点

class Solution {
public:
    bool isHappy(int n) {
        int fast=sum(n);
        int low=n;
        while(fast!=1&&fast!=low)
        {
            fast=sum(sum(fast));
            low=sum(low);
        }
        return fast==1;
    }
    int sum(int n)
    {
        int res=0;
        while(n>0)
        {
            res+=(int)pow((double)(n%10),2);
            n/=10;
        }
        return res;
    }
};

//硬编码 因为数字只会在243以下循环 999->243 
//先从2开始遍历 找到一个・能找到所有周期的循环
//即4-16-37-58-89-145-42-20-4  所有数字都在进入这个循环的链上 或者在进入1的链上
由于硬编码set大小固定 所以空间复杂度为1