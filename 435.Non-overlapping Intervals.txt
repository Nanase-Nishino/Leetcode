// Find out how many not-overlapping intervals
// In dynamic programming,the non-overlapping number of the current interval is deducted from the previou interval.



// Greedy Algorithm
// Find the interval with the smallest right end-point.
// Find the interval that does not coincide with the first interval 
// Record the right end-point of previous interval

class Solution {
public:
    int eraseOverlapIntervals(vector<vector<int>>& intervals) {
        if(intervals.empty()){
            return 0;
        }
        sort(intervals.begin(),intervals.end(),[](const auto& a,const auto& b){
            return a[1]<b[1];
        });
        //initial value=1
        int cnt=1;
        int right=intervals[0][1];
        for(int i=1;i<intervals.size();i++){
            if(intervals[i][0]>=right){
                cnt++;
                right=intervals[i][1];
            }
        }
        return intervals.size()-cnt;
    }
};

// DP
// dp eqution:dp[i]=max(dp[i],dp[j]+1)

class Solution {
public:
    int eraseOverlapIntervals(vector<vector<int>>& intervals) {
        if(intervals.empty()){
            return 0;
        }
        sort(intervals.begin(),intervals.end(),[](const auto& a,const auto& b){
            return a[0]<b[0];
        });
        vector<int> dp(intervals.size(),1);
        for(int i=1;i<intervals.size();i++){
            for(int j=0;j<i;j++){
                if(intervals[j][1]<=intervals[i][0]){
                    dp[i]=max(dp[i],dp[j]+1);
                }
            }
        }
        return intervals.size()-*max_element(dp.begin(),dp.end());
    }
};