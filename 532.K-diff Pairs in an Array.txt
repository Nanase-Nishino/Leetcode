//双重指针

class Solution {
public:
    int findPairs(vector<int>& nums, int k) {
        if(nums.empty())
            return 0;
        sort(nums.begin(),nums.end());
        int cnt=0;
        for(int i=0;i<nums.size()-1;i++)
        {
            if(i>0&&nums[i-1]==nums[i])
                continue;
            for(int j=i+1;j<nums.size();j++)
            {
                if(j>i+1&&nums[j]==nums[j-1])
                    continue;
                if((nums[j]-nums[i])==k)
                    cnt++;
                if((nums[j]-nums[i])>k)
                    break;
            }
        }
        return cnt;
    }
};

//map

class Solution {
public:
    int findPairs(vector<int>& nums, int k) {
        if(nums.empty()||k<0)
            return 0;
        unordered_set<int> visit, res;
        for(int n:nums)
        {
            if(visit.count(n-k))
                res.insert(n-k);
            if(visit.count(n+k))
                res.insert(n);
            visit.insert(n);
        }
        return res.size();//避免重复
    }
};