//链表排序--->归并
//划分子集+子集合并排序
//自底向上
//空间复杂度为O(1)

class Solution {
private:
    ListNode* merge(ListNode* l1,ListNode* l2){
        ListNode* dummy=new ListNode(0);
        ListNode* head=dummy;
        ListNode* t1=l1;
        ListNode* t2=l2;
        while(t1&&t2){
            if(t1->val<=t2->val){
                head->next=t1;
                t1=t1->next;
            }
            else{
                head->next=t2;
                t2=t2->next;
            }
            head=head->next;
        }
        if(t1){
            head->next=t1;
        }
        else if(t2){
            head->next=t2;
        }
        return dummy->next;
    }
public:
    ListNode* sortList(ListNode* head) {
        if(!head){
            return head;
        }
        int len=0;
        ListNode* p=head;
        while(p){
            len++;
            p=p->next;
        }

        ListNode* dummy=new ListNode(0,head);
        for(int subLen=1;subLen<len;subLen<<=1){
            ListNode* pre=dummy;
            ListNode* cur=dummy->next;
            while(cur){
                ListNode* h1=cur;
                for(int i=1;i<subLen&&cur->next;i++){
                    cur=cur->next;
                }
                ListNode* h2=cur->next;
                cur->next=nullptr;
                cur=h2;
                //此时一开始的h2可能为nullptr
                for(int i=1;i<subLen&&cur&&cur->next;i++){
                    cur=cur->next;
                }
                ListNode* next=nullptr;
                if(cur){
                    next=cur->next;
                    cur->next=nullptr;
                }
                ListNode* merged=merge(h1,h2);
                pre->next=merged;
                while(pre->next){
                    pre=pre->next;
                }
                cur=next;
            }
        }
        return dummy->next;
    }
};

//自顶向下
//额外空间复杂度为O(nlogn)

class Solution {
private:
    ListNode* merge(ListNode* l1,ListNode* l2){
        ListNode* dummy=new ListNode(0);
        ListNode* head=dummy;
        ListNode* t1=l1;
        ListNode* t2=l2;
        while(t1&&t2){
            if(t1->val<=t2->val){
                head->next=t1;
                t1=t1->next;
            }
            else{
                head->next=t2;
                t2=t2->next;
            }
            head=head->next;
        }
        if(t1){
            head->next=t1;
        }
        else if(t2){
            head->next=t2;
        }
        return dummy->next;
    }
    ListNode* sortList(ListNode* head,ListNode* tail){
        if(!head){
            return head;
        }
        // 只有一个结点 并且要将后续剪断
        if(head->next==tail){
            head->next=nullptr;
            return head;
        }
        ListNode* fast=head;
        ListNode* slow=head;
        while(fast!=tail){
            slow=slow->next;
            fast=fast->next;
            if(fast!=tail){
                fast=fast->next;
            }
        }
        // 自顶向下找中点
        return merge(sortList(head,slow),sortList(slow,tail));
    }
public:
    ListNode* sortList(ListNode* head) {
        return sortList(head,nullptr);
    }
};


//快排

class Solution {
private:
    ListNode* split(ListNode* head){
        ListNode* fast=head;
        ListNode* slow=head;
        while(fast){
            slow=slow->next;
            fast=fast->next;
            if(fast){
                fast=fast->next;
            }
        }
        return slow;
    }
    ListNode* quickSort(ListNode* head){
        if(!head||!head->next){
            return head;
        }
        ListNode* mid=split(head);
        const int x=mid->val;
        ListNode* small=new ListNode(0);
        ListNode* stail=small;
        ListNode* equal=new ListNode(0);
        ListNode* etail=equal;
        ListNode* large=new ListNode(0);
        ListNode* ltail=large;
        ListNode* p=head;
        while(p){
            ListNode* next=p->next;
            if(p->val<x){
                stail->next=p;
                stail=p;
            }
            else if(p->val==x){
                etail->next=p;
                etail=p;
            }
            else{
                ltail->next=p;
                ltail=p;
            }
            p=next;
        }
        stail->next=nullptr;
        etail->next=nullptr;
        ltail->next=nullptr;
        small->next=quickSort(small->next);
        large->next=quickSort(large->next);
        p=small->next;
        while(p&&p->next){
            p=p->next;
        }
        if(p){
            p->next=equal->next;
        }
        else{
            small->next=equal->next;
        }
        etail->next=large->next;
        return small->next;
    }
public:
    ListNode* sortList(ListNode* head) {
        if(!head||!head->next){
            return head;
        }
        return quickSort(head);
    }
};

//快排局部优化

ListNode* quickSort(ListNode* head){
        if(!head||!head->next){
            return head;
        }
        ListNode* mid=split(head);
        const int x=mid->val;
        ListNode small,*stail=&small;
        ListNode equal,*etail=&equal;
        ListNode large,*ltail=&large;
        ListNode* p=head;
        while(p){
            ListNode* next=p->next;
            if(p->val<x){
                stail->next=p;
                stail=p;
            }
            else if(p->val==x){
                etail->next=p;
                etail=p;
            }
            else{
                ltail->next=p;
                ltail=p;
            }
            p=next;
        }
        stail->next=nullptr;
        etail->next=nullptr;
        ltail->next=nullptr;
        small.next=quickSort(small.next);
        large.next=quickSort(large.next);
        p=small.next;
        while(p&&p->next){
            p=p->next;
        }
        if(p){
            p->next=equal.next;
        }
        else{
            small.next=equal.next;
        }
        etail->next=large.next;
        return small.next;
    }
