//调库 regex_match() 正则表达式
class Solution {
public:
    bool isMatch(string s, string p) {
        return regex_match(s,regex(p));
    }
};

//暴力解法
class Solution {
public:
    bool domatch(const string& s,int sindex,const string& p,int pindex)
    {
        if(pindex>=p.size())
            return sindex>=s.size();
        bool currentmatch=sindex<s.size()&&(s[sindex]==p[pindex]||p[pindex]=='.');
        if(pindex+1<p.size()&&p[pindex+1]=='*')
            return domatch(s,sindex,p,pindex+2)||(currentmatch&&domatch(s,sindex+1,p,pindex));
        else
            return currentmatch&&domatch(s,sindex+1,p,pindex+1);//currentmatch判定一定要在前边 隐含了对sindex的判定
    }
    bool isMatch(string s, string p) {
        return domatch(s,0,p,0);
    }
};

//回溯 用mem记录发生情况 防止相同参数调用domatch
class Solution {
public:
    bool domatch(const string& s,int sindex,const string& p,int pindex,vector<vector<int>>& mem)
    {
        if(mem[sindex][pindex]!=-1)
            return mem[sindex][pindex];
        bool res;
        if(pindex>=p.size())
            res=sindex>=s.size();
        else
        {
            bool currentmatch=(sindex<s.size()&&(s[sindex]==p[pindex]||p[pindex]=='.'));
            if(pindex+1<p.size()&&p[pindex+1]=='*')
                res=domatch(s,sindex,p,pindex+2,mem)||(currentmatch&&domatch(s,sindex+1,p,pindex,mem));
            else
                res=currentmatch&&domatch(s,sindex+1,p,pindex+1,mem);
        }
        mem[sindex][pindex]=res;
        return res;
    }
    bool isMatch(string s, string p) {
        vector<vector<int>> mem(s.size()+1,vector<int>(p.size()+1,-1));
        return domatch(s,0,p,0,mem);
    }
};

//动态规划
//f[i][j]表示s的前i个能否和p的前j个匹配
//f[i][j]= if(p[j]!='*') f[i-1][j-1] matches(s[i],p[j])
		false    otherwise
//f[i][j]= if(p[j]='*') f[i-1][j](上一次匹配)/f[i][j-2]//匹配0次 macthes(s[i],p[j-1])
			 f[i][j-2]                                  otherwise!


class Solution {
public:
    bool isMatch(string s, string p) {
        int m=s.size();
        int n=p.size();
        auto matches=[&](int i,int j){
            if(i==0) //i==0代表前0个字符 肯定为false
                return false;
            if(p[j-1]=='.')
                return true;
            return s[i-1]==p[j-1];
        };
        vector<vector<int>> f(m+1,vector<int>(n+1,0));
        f[0][0]=true;
        for(int i=0;i<=m;i++)  //i要从0开始 是为了p开头可以为a* 然后匹配0次 要跳过这些
            for(int j=1;j<=n;j++)
            {
                if(p[j-1]=='*')
                {
                    f[i][j]|=f[i][j-2];
                    if(matches(i,j-1))
                        f[i][j]|=f[i-1][j];
                }
                else
                    if(matches(i,j))
                        f[i][j]|=f[i-1][j-1];
            }
        return f[m][n];
    }
};