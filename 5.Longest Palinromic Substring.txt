//Expand Around Center

class Solution {
public:
    pair<int,int> expandAroundCenter(string& s,int left,int right)
    {
        while(left>=0&&right<s.size()&&s[left]==s[right])
        {
            left--;
            right++;
        }
        return {left+1,right-1};
    }
    string longestPalindrome(string s) {
        int start=0,end=0;
        for(int i=0;i<s.size();i++)
        {
            auto [left1,right1]=expandAroundCenter(s,i,i);
            auto [left2,right2]=expandAroundCenter(s,i,i+1);
            if(right1-left1>end-start)
            {
                end=right1;
                start=left1;
            }
            if(right2-left2>end-start)
            {
                end=right2;
                start=left2;
            }
        }
        return s.substr(start,end-start+1);
    }
};


//Manacher Algorithm


class Solution {
public:
    string longestPalindrome(string s) {
        int n=s.size();
        if(n<1)
          return "";

        string s1;
        for(int i=0;i<n;i++)
        {
            s1+='#';
            s1+=s[i];
        }
        s1+='#';

        n=s1.size();
        int MaxRight=0;//当前所有回文子串的最右边界
        int pos=0;//MaxRight对应的回文串的中心
        int MaxRL=0;//最大回文串的回文半径
        int MaxPos=0;//MaxRL对应的回文串的中心
        int RL[n]={0};//回文半径数组

        for(int i=0;i<n;i++)
        {
            if(i<MaxRight)
            {//i在MaxRight的左边
                RL[i]=min(RL[2*pos-i],MaxRight-i);
            }
            else
            {//当i在MaxRight的右边
                RL[i]=1;
            }

            //扩展RL[i]
            while(i-RL[i]>=0&&i+RL[i]<n&&s1[i-RL[i]]==s1[i+RL[i]])
              RL[i]++;
            
            //更新MaxRight及pos
            if(RL[i]+i>MaxRight)
            {
                MaxRight=RL[i]+i;
                pos=i;
            }

            //更新MaxRL及MaxPos
            if(MaxRL<=RL[i])
            {
                MaxRL=RL[i];
                MaxPos=i;
            }
        }

        return s.substr((MaxPos-MaxRL+1)/2,MaxRL-1);
    }
};

//Dynamic Programming
//dp fun=dp[i+1][j-1]&&si==sj
//boundary condition: Len==0 dp[i][j]=1
		      Len==1 dp[i][j]=si==sj

class Solution {
public:
    string longestPalindrome(string s) {
        int N=s.size();
        vector<vector<int>> dp(N,vector<int>(N));
        string ans;
        for(int Len=0;Len<N;Len++)
            for(int i=0;i+Len<N;i++)
            {
                int j=i+Len;
                if(Len==0)
                    dp[i][j]=1;
                else if(Len==1)
                    dp[i][j]=(s[i]==s[j]);
                else
                    dp[i][j]=(s[i]==s[j]&&dp[i+1][j-1]);
                if(dp[i][j]&&Len+1>ans.size())
                    ans=s.substr(i,Len+1);
            }
        return ans;
    }
};