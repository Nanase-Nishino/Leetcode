//递归 直接在原链表上修改 不新建链表
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1==nullptr)
            return l2;
        if(l2==nullptr)
            return l1;
        if(l1->val<l2->val)
        {
            l1->next=mergeTwoLists(l1->next,l2);
            return l1;
        }
        else
        {
            l2->next=mergeTwoLists(l2->next,l1);
            return l2;
        }
    }
};

//新建链表递归操作
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1==nullptr)
            return l2;
        if(l2==nullptr)
            return l1;
        ListNode* head=l1->val<l2->val?l1:l2;
        if(l1->val<l2->val)
        {
            head->next=mergeTwoLists(l1->next,l2);
        }
        else
        {
            head->next=mergeTwoLists(l2->next,l1);
        }
        return head;
    }
};

//普通链表操作
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1==nullptr)
            return l2;
        if(l2==nullptr)
            return l1;
        ListNode* res=nullptr;
        
        //建立表头
        if(l1->val<=l2->val)
        {
            res=l1;
            l1=l1->next;
        }
        else
        {
            res=l2;
            l2=l2->next;
        }
        ListNode* head=res;
        
        while(l1!=nullptr&&l2!=nullptr)
        {
            if(l1->val<=l2->val)
            {
                head->next=l1;
                head=head->next;
                l1=l1->next;
            }
            else
            {
                head->next=l2;
                head=head->next;
                l2=l2->next;
            }
        }
        
        head->next=l1!=nullptr?l1:l2;
        return res;
    }
};

