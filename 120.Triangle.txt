//自底向上

class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        if(triangle.empty())
            return 0;
        int N=triangle.size();
        vector<vector<int>> dp(N);
        for(int i=0;i<triangle[N-1].size();i++)
            dp[N-1].emplace_back(triangle[N-1][i]);
        
        for(int i=N-2;i>=0;i--)
        {
            for(int j=0;j<triangle[i].size();j++)
            {
                int posL=(!j?0:j);
                int posR=j+1;
                int cur=min(dp[i+1][posL],dp[i+1][posR])+triangle[i][j];
                dp[i].emplace_back(cur);
            }
        }
        return dp[0][0];
    }
};

//从上至下

class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        if(triangle.empty())
            return 0;
        int N=triangle.size();
        vector<vector<int>> dp(N,vector<int>(N,0));
        dp[0][0]=triangle[0][0];
        for(int i=1;i<N;i++)
        {
            dp[i][0]=dp[i-1][0]+triangle[i][0];
            for(int j=1;j<i;j++)
                dp[i][j]=min(dp[i-1][j],dp[i-1][j-1])+triangle[i][j];
            dp[i][i]=dp[i-1][i-1]+triangle[i][i];
        }
        return *min_element(dp[N-1].begin(),dp[N-1].end());
    }
};

//优化
//1.在原数组上操作 不一定可以
//2.一维数组

//从左至右 需要记录cur 从右至左不需要
//左-右
class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        if(triangle.empty())
            return 0;
        int N=triangle.size();
        int M=triangle[N-1].size();
        vector<int> dp(M,0);
        dp[0]=triangle[0][0];
        for(int i=1;i<N;i++)
        {
            int cur=dp[0];
            dp[0]=dp[0]+triangle[i][0];
            for(int j=1;j<i;j++)
            {
                int tem=dp[j];
                dp[j]=min(dp[j],cur)+triangle[i][j];
                cur=tem;
            }
            dp[i]=cur+triangle[i][i];
        }
        return *min_element(dp.begin(),dp.end());
    }
};
//右-左
class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        if(triangle.empty())
            return 0;
        int N=triangle.size();
        int M=triangle[N-1].size();
        vector<int> dp(M,0);
        dp[0]=triangle[0][0];
        for(int i=1;i<N;i++)
        {
            dp[i]=dp[i-1]+triangle[i][i];
            for(int j=i-1;j>0;j--)
            {
                dp[j]=min(dp[j],dp[j-1])+triangle[i][j];
            }
            dp[0]=dp[0]+triangle[i][0];
        }
        return *min_element(dp.begin(),dp.end());
    }
};

