class Solution {
public:
    int minJumps(vector<int>& arr) {
        int n=arr.size();
        unordered_map<int, vector<int>> sameValue;
        for(int i=0;i<n;i++)
        sameValue[arr[i]].push_back(i);

        for(auto it=sameValue.begin();it!=sameValue.end();)
        {
            if(it->second.size()==1)
              it=sameValue.erase(it);//返回it的下一个位置 防止删除位置不可知
            else
              it++;
        }

        int currStep=0;
        vector<bool> visited(n,false);
        queue<int> q;
        visited[0]=true;
        q.push(0);

        while(!q.empty())
        {
            int sz=q.size();
            for(int i=0;i<sz;i++)
            {
                int t=q.front();
                q.pop();
                if(t==n-1)
                  return currStep;
                
                if(sameValue.find(arr[t])!=sameValue.end())
                {
                    auto tunnels=sameValue[arr[t]];
                    for(int tunnel:tunnels)
                    {
                        if(tunnel==t||visited[tunnel])
                          continue;
                        visited[tunnel]=true;
                        q.push(tunnel);
                    }
                    sameValue.erase(arr[t]);
                }

                if(t+1<arr.size()&&!visited[t+1])
                {
                    visited[t+1]=true;
                    q.push(t+1);
                }
                if(t-1>=0&&!visited[t-1])
                {
                    visited[t-1]=true;
                    q.push(t-1);
                }
            }
            ++currStep;
        }
        return -1;
    }
};