//子序列不要求连续 且不要求相对关系 所以可以排序
//固定min 则有min<=max<=target-min
//二分查找max 得到[min,target-min]的个数x 则子序列个数为2^(x-1)
//预处理 这里用快速幂的话为O(nlogn) 
//预处理的话可以递推 此时O(n)
//(a+b)modP=[(amodP)+(bmodP)]modP
//(axb)modP=[(amodP)x(bmodP)]modP


class Solution {
private:
    static constexpr int P=int(1E9)+7;
    static constexpr int MAX_N=int(1E5)+5;
    int f[MAX_N];
    void pretreatment()
    {
        f[0]=1;
        for(int i=1;i<MAX_N;i++)
            f[i]=(long long)2*f[i-1]%P;
    }
public:
    int numSubseq(vector<int>& nums, int target) {
        pretreatment();
        sort(nums.begin(),nums.end());
        int ans=0;
        for(int i=0;i<nums.size()&&nums[i]<=target/2;i++)
        {
            int maxV=target-nums[i];
            int pos=upper_bound(nums.begin(),nums.end(),maxV)-nums.begin()-1;
            int contri=(pos>=i)?f[pos-i]:0;
            ans=(ans+contri)%P;
        }
        return ans;
    }
};