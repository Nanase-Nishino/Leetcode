//dp
//dp[i][0]:目前持有一只股票	    dp[i][0]=max(dp[i-1][0],dp[i-1][2]-prices)
//dp[i][1]:卖	    		    dp[i][1]=dp[i-1][0]-prices
//dp[i][2]:没有股票 没有操作        dp[i][2]=max(dp[i-1][1],dp[i-1][2])


class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if(prices.empty())
            return 0;
        int N=prices.size();
        vector<vector<int>> dp(N+1,vector<int>(3,0));
        dp[0][0]=-prices[0];
        for(int i=1;i<N;i++)
        {
            dp[i][0]=max(dp[i-1][0],dp[i-1][2]-prices[i]);
            dp[i][1]=dp[i-1][0]+prices[i];
            dp[i][2]=max(dp[i-1][2],dp[i-1][1]);
        }
        return max(dp[N-1][1],dp[N-1][2]);
    }
};

//空间优化 当前状态只与上一个状态有关

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if(prices.empty())
            return 0;
        int N=prices.size();
        int dp1=-prices[0], dp2=0, dp3=0;
        for(int i=1;i<N;i++)
        {
            int newdp1=max(dp1,dp3-prices[i]);
            int newdp2=dp1+prices[i];
            int newdp3=max(dp2,dp3);
            dp1=newdp1;
            dp2=newdp2;
            dp3=newdp3;
        }
        return max(dp2,dp3);
    }
};