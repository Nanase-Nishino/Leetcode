//

class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        int N=numbers.size();
        int i=0, j=N-1;
        vector<int> res(2);
        while(i<j)
        {
            int cur=numbers[i]+numbers[j];
            if(cur>target)
                j--;
            else if(cur<target)
                i++;
            else 
            {
                res[0]=i+1;
                res[1]=j+1;
                break;
            }
        }
        return res;
    }
};

//哈希针对无序数组 所有要全部压入哈希

class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        vector<int> values;
        unordered_map<int,int> map;
        for(int i=0;i<numbers.size();i++)
          map[numbers[i]]=i;
        for(int i=0;i<numbers.size();i++)
        {
            if(map.count(target-numbers[i])&&map[target-numbers[i]]!=i)
            {
                values.emplace_back(i+1);
                values.emplace_back(map[target-numbers[i]]+1);
                break;
            }
        }
        return values;
    }
};