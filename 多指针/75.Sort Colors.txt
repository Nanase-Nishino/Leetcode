//单指针 两次遍历

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int N=nums.size();
        int ptr=0;
        for(int i=0;i<N;i++){
            if(nums[i]==0){
                swap(nums[i],nums[ptr]);
                ptr++;
            }
        }
        for(int i=ptr;i<N;i++){
            if(nums[i]==1){
                swap(nums[i],nums[ptr]);
                ptr++;
            }
        }
    }
};


//双指针
//指示0/1位置

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int N=nums.size();
        int ptr0=0;
        int ptr1=0;
        for(int i=0;i<N;i++){
            if(nums[i]==1){
                swap(nums[i],nums[ptr1]);
                ptr1++;
            }
            else if(nums[i]==0){
                swap(nums[i],nums[ptr0]);
                //0之后是连续1 交换会把0之后的1交换出去 
                if(ptr0<ptr1){
                    swap(nums[ptr1],nums[i]);
                }
                ++ptr0;
                ++ptr1;
            }
        }
    }
};

//双指针
//指示0/2位置

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int N=nums.size();
        int ptr0=0,ptr2=N-1;
        for(int i=0;i<=ptr2;i++){
            while(i<=ptr2&&nums[i]==2){
                swap(nums[i],nums[ptr2]);
                ptr2--;
            }
            if(nums[i]==0){
                swap(nums[i],nums[ptr0]);
                ptr0++;
            }
        }
    }
};