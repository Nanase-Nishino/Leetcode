//DFS+mem
//主要在于要有逆推的思想 不能执着于正推！
//利用递归本身的逆推性质！

class Solution {
private:
    int dfs(int x,int y,vector<vector<int>>& visited,vector<vector<int>>& dungeon)
    {
        if(x>=dungeon.size()||y>=dungeon[0].size())
            return INT_MAX;
        if(visited[x][y]!=0)
            return visited[x][y];
        if(x==dungeon.size()-1&&y==dungeon[0].size()-1)
            return dungeon[x][y]>=0? 0:-dungeon[x][y];
        int right=dfs(x,y+1,visited,dungeon);
        int down=dfs(x+1,y,visited,dungeon);
        int cur=min(right,down)-dungeon[x][y];
        cur=cur<0? 0:cur;
        visited[x][y]=cur;
        return cur;
    }
public:
    int calculateMinimumHP(vector<vector<int>>& dungeon) {
        vector<vector<int>> visited(dungeon.size(),vector<int>(dungeon[0].size(),0));
        return dfs(0,0,visited,dungeon)+1;
    }
};

//逆推dp
//dp func 
//dp[i][j]表示从(i,j)到终点所需最小值
//dp[i][j] = min(dp[i+1][j],min[i][j+1])-dun[i][j]

class Solution {
public:
    int calculateMinimumHP(vector<vector<int>>& dungeon) {
        int m=dungeon.size(), n=dungeon[0].size();
        vector<vector<int>> dp(m+1,vector<int>(n+1,INT_MAX));
        dp[m][n-1]=1;
        dp[m-1][n]=1;
        for(int i=m-1;i>=0;i--)
            for(int j=n-1;j>=0;j--)
                dp[i][j]=max(min(dp[i+1][j],dp[i][j+1])-dungeon[i][j],1);
        return dp[0][0];
    }
};

//空间优化
//dp[j]代表之前的值 所以是dp[n-1]进行初始化 替换之前的dp中的第m行！

class Solution {
public:
    int calculateMinimumHP(vector<vector<int>>& dungeon) {
        int m=dungeon.size(), n=dungeon[0].size();
        vector<int> dp(n+1,INT_MAX);
        dp[n-1]=1;//行被压缩 所以是在n-1处初始化 
        for(int i=m-1;i>=0;i--)
            for(int j=n-1;j>=0;j--)
                dp[j]=max(min(dp[j],dp[j+1])-dungeon[i][j],1);
        return dp[0];
    }
};