//为每个固定的集合选定一个固定的元素表示整个集合
class DisjointSetUnion{
private:
    // rank是降秩优化
    vector<int> f,rank;
    int n;
public:
    DisjointSetUnion(int _n){
        n=_n;
        rank.resize(n,1);
        f.resize(n);
        for(int i=0;i<n;i++){
            f[i]=i;
        }
    }
    //返回整个集合的代表
    int find(int x){
        //路径压缩
        return f[x]==x?x:f[x]=find(f[x]);
    }
    void unionSet(int x,int y){
        int fx=find(x);
        int fy=find(y);
        if(fx==fy){
            return;
        }
        //限定深度小的联通分量加入深度大的联通分量
        if(rank[fx]<rank[fy]){
            swap(fx,fy);
        }
        //将深度合并
        rank[fx]+=rank[fy];
        //将两个集合合并
        f[fy]=fx;
    }
};
class Solution {
public:
    string smallestStringWithSwaps(string s, vector<vector<int>>& pairs) {
        int len=s.size();
        DisjointSetUnion dsu(len);
        for(auto& it:pairs){
            dsu.unionSet(it[0],it[1]);
        }
        unordered_map<int,vector<int>> mp;
        for(int i=0;i<len;i++){
            mp[dsu.find(i)].emplace_back(s[i]);
        }
        for(auto& [x,vec]:mp){
            sort(vec.begin(),vec.end(),greater<int>());
        }
        for(int i=0;i<len;i++){
            int x=dsu.find(i);
            s[i]=mp[x].back();
            mp[x].pop_back();
        }
        return s;
    }
};