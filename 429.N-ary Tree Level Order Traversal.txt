//BFS

class Solution {
private:
    void dfs(TreeNode* root,int level,vector<double>& cnt,vector<double>& sum)
    {
        if(!root)
            return;
        if(level>=sum.size())
        {
            cnt.emplace_back(0);
            sum.emplace_back(0);
        }
        sum[level]+=1.0*root->val;
        cnt[level]+=1.0;
        dfs(root->left,level+1,cnt,sum);
        dfs(root->right,level+1,cnt,sum);
    }
public:
    vector<double> averageOfLevels(TreeNode* root) {
        vector<double> cnt,sum;
        vector<double> ans;
        dfs(root,0,cnt,sum);
        for(int i=0;i<sum.size();i++)
            ans.emplace_back(sum[i]/cnt[i]);
        return ans;
    }
};

//DFS

class Solution {
private:
    vector<vector<int>> res;
    void dfs(Node* root,int level)
    {
        if(!root)
            return;
        if(res.size()<=level)
        {
            vector<int> cur;
            res.emplace_back(cur);
        }
        res[level].emplace_back(root->val);
        for(Node* x:root->children)
            dfs(x,level+1);
    }
public:
    vector<vector<int>> levelOrder(Node* root) {
        dfs(root,0);
        return res;
    }
};