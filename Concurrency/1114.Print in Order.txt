//信号量

#include<semaphore.h>
class Foo {
protected:
    sem_t firstJobDone;
    sem_t secondJobDone;
public:
    Foo() {
        //信号量的初始化
        //第二个0表示不在进程间共享
        //第三个0为初始信号量
        sem_init(&firstJobDone,0,0);
        sem_init(&secondJobDone,0,0);
    }

    void first(function<void()> printFirst) {
        
        // printFirst() outputs "first". Do not change or remove this line.
        printFirst();
        sem_post(&firstJobDone);
    }

    void second(function<void()> printSecond) {
        
        // printSecond() outputs "second". Do not change or remove this line.
        sem_wait(&firstJobDone);
        printSecond();
        sem_post(&secondJobDone);
    }

    void third(function<void()> printThird) {
        
        // printThird() outputs "third". Do not change or remove this line.
        sem_wait(&secondJobDone);
        printThird();
    }
};

//锁

class Foo {
private:
    mutex lock2;
    mutex lock3;
public:
    Foo() {
        lock2.lock();
        lock3.lock();
    }

    void first(function<void()> printFirst) {
        
        // printFirst() outputs "first". Do not change or remove this line.
        printFirst();
        lock2.unlock();
    }

    void second(function<void()> printSecond) {
        
        // printSecond() outputs "second". Do not change or remove this line.
        lock2.lock();
        printSecond();
        lock3.unlock();
    }

    void third(function<void()> printThird) {
        
        // printThird() outputs "third". Do not change or remove this line.
        lock3.lock();
        printThird();
    }
};

