//Four boundaries of array are:Left,Right,Top,Bottom
//Compress State == make a turn by 90Â°

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        if(matrix.empty())
            return {};
        const int N=matrix.size(),M=matrix[0].size();
        int L=0,R=M-1,T=0,B=N-1,index=0;
        vector<int> res(M*N);
        while(1+1==2)
        {
            for(int i=L;i<=R;i++) res[index++]=matrix[T][i];//left->right
            if(++T>B) break;
            for(int i=T;i<=B;i++) res[index++]=matrix[i][R];//top->bottom
            if(--R<L) break;
            for(int i=R;i>=L;i--) res[index++]=matrix[B][i];//right->left
            if(--B<T) break;
            for(int i=B;i>=T;i--) res[index++]=matrix[i][L];//bottom->top
            if(++L>R) break;
        }
        return res;
    }
};