//Create a dummy node for border avoidance.

class Solution {
public:
    pair<ListNode*,ListNode*> myReverse(ListNode* head,ListNode* tail)
    {
        ListNode *p=head;
        ListNode *prev=tail->next;

        while(tail!=prev)
        {
            ListNode* nex=p->next;
            p->next=prev;
            prev=p;
            p=nex;
        }
	//Return the new tail and head!!
        return {tail,head};
    }
    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode* hair=new ListNode(0);
        hair->next=head;
        ListNode* pre=hair;

        while(head)
        {
            ListNode* tail=pre;
            for(int i=0;i<k;i++)
            {
                tail=tail->next;
                if(!tail)
                    return hair->next;
            }
            ListNode* nex=tail->next;
            pair<ListNode*,ListNode*> res=myReverse(head,tail);
            head=res.first;
            tail=res.second;
	    //Reconnect the sublist.
            pre->next=head;
            tail->next=nex;
            pre=tail;
            head=tail->next;
        }
        return hair->next;
    }
};