/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

//迭代+单调栈
//若当前节点是T，上一个节点是S，有两种情况：
//1.T是S是左节点
//2.T是S的某个祖先节点的右节点
//所以 满足单调栈特性！

//栈的长度代表此时深度，若当前节点的深度相同，那肯定就在栈顶的左节点。
//若当前节点的深度小于栈长，那么说明节点在栈长与深度相等时的栈顶节点的右节点！

class Solution {

public:
    TreeNode* recoverFromPreorder(string S) {
        stack<TreeNode*> s;
        int pos=0;
        while(pos<S.size())
        {
            int level=0;
            while(pos<S.size()&&S[pos]=='-')
            {
                level++;
                pos++;
            }
            int value=0;
            while(pos<S.size()&&isdigit(S[pos]))
            {
                value=value*10+S[pos]-'0';
                pos++;
            }
            TreeNode* node=new TreeNode(value);
            if(level==s.size())
            {
                if(!s.empty())
                    s.top()->left=node;
            }
            else
            {
                while(level!=s.size())//找到深度相同的右节点
                    s.pop();
                s.top()->right=node;
            }
            s.push(node);
        }
        while(s.size()>1)
            s.pop();
        return s.top();
    }
};

//递归！
//设置全局变量idx和dep的意义在于控制在idx在同一深度下 可以被重复利用！

class Solution {
private:
    string s;
    int idx=0,n,dep=0;
public:
    TreeNode* recoverFromPreorder(string _S) {
        s=_S;
        n=s.size();
        return dfs(0);
    }

    TreeNode* dfs(int curDep)
    {
        while(idx<n&&s[idx]=='-')
        {
            dep++;
            idx++;
        }
        if(dep!=curDep) //关键！！ 这个保证了idx在同一深度上 不会超过val 可以在保持深度全局变量
			  的情况下， 遍历左右子节点！
            return nullptr;
        int val=0;
        while(idx<n&&isdigit(s[idx]))
            val=val*10+s[idx++]-'0';
        TreeNode* p=new TreeNode(val);
        dep=0;//进入新的层次 
        p->left=dfs(curDep+1);
        p->right=dfs(curDep+1);
        return p;
    }
};