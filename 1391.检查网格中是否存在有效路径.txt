//把每个单元格看做点 单元格之间的直接可达关系看作边
//直接可达关系是指从某单元格可以直接到达上下左右某个单元格的关系

//并查集是一维的 单元格是二维的 进行映射
//对于单元格 根据值的不同 最多连接两个方向的单元格 遍历后判断左上和右下是否属于同一集合
class Solution {
public:
    static constexpr int MAX_N=300*300+5;
    struct DisjoinSet
    {
        int f[MAX_N];
        DisjoinSet()
        {
            for(int i=0;i<MAX_N;i++)
                f[i]=i;
        }
        int find(int x)
        {
            return x==f[x]?x:f[x]=find(f[x]);//路径压缩,若之前已被合并,检查头节点是否改变并重新指向头结点
        }
        void merge(int x,int y)
        {
            f[find(x)]=find(y);
        }
    }ds;
    bool hasValidPath(vector<vector<int>>& grid) {
        int n=grid.size(),m=grid[0].size();
        auto getId=[&](int x,int y){return x*m+y;};
        auto detcetL=[&](int x,int y)
        {
            if(y-1>=0&&(grid[x][y-1]==4||grid[x][y-1]==6||grid[x][y-1]==1))
            {
                ds.merge(getId(x,y),getId(x,y-1));
            }
        };
        auto detcetR=[&](int x,int y)
        {
            if(y+1<m&&(grid[x][y+1]==3||grid[x][y+1]==5||grid[x][y+1]==1))
            {
                ds.merge(getId(x,y),getId(x,y+1));
            }
        };
        auto detcetU=[&](int x,int y)
        {
            if(x-1>=0&&(grid[x-1][y]==3||grid[x-1][y]==4||grid[x-1][y]==2))
            {
                ds.merge(getId(x,y),getId(x-1,y));
            };
        };
        auto detcetD=[&](int x,int y)
        {
            if(x+1<n&&(grid[x+1][y]==5||grid[x+1][y]==6||grid[x+1][y]==2))
            {
                ds.merge(getId(x,y),getId(x+1,y));
            }
        };
        auto handler=[&](int x,int y)
        {
            switch(grid[x][y])
            {
                case 1: detcetL(x,y);detcetR(x,y);break;
                case 2: detcetU(x,y);detcetD(x,y);break;
                case 3: detcetL(x,y);detcetD(x,y);break;
                case 4: detcetR(x,y);detcetD(x,y);break;
                case 5: detcetL(x,y);detcetU(x,y);break;
                case 6: detcetR(x,y);detcetU(x,y);break;
            }
        };
        for(int i=0;i<n;i++)
            for(int j=0;j<m;j++)
                handler(i,j);
        return ds.find(getId(0,0))==ds.find(getId(n-1,m-1));
    }
};