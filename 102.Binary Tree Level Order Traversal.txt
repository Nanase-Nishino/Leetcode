//Level order traversal + for-loop 
//In this way,we can perform some interesting tricks
//BFS
Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        if(!root)
            return {};
        queue<TreeNode*> q;
        q.push(root);
        vector<vector<int>> ans;
        while(!q.empty())
        {
            int size=q.size();
            ans.push_back(vector<int>());
            for(int i=0;i<size;i++)
            {
                TreeNode* node=q.front();
                q.pop();
                ans.back().push_back(node->val);
                if(node->left)
                    q.push(node->left);
                if(node->right)
                    q.push(node->right);
            }
        }
        return ans;
    }
};

//DFS
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> res;
        dfs(res,root,0);
        return res;
    }
    void dfs(vector<vector<int>>& res,TreeNode* root,int level)
    {
        if(!root)
            return;
        if(level>=res.size())
            res.push_back(vector<int>());
        res[level].push_back(root->val);
        dfs(res,root->left,level+1);
        dfs(res,root->right,level+1);
    }
};
