//动态规划
//若要在一个区间安排邮局 则必然最佳位置是在中间位置
//我们枚举最后一个邮局负责的区间
//最后一个邮局的最大范围是 前j-1个邮局各自负责一个 最后一个负责j-1到i的所有房子
//              最小范围是 只负责第i个房子


class Solution {
public:
    int minDistance(vector<int>& houses, int K) {
        sort(houses.begin(),houses.end());
        int n=houses.size();
        vector<vector<int>> rec(n,vector<int>(n,0));
        //rec[i][j]表示[i,j]区间内 用一个邮箱的最小距离
        for(int i=0;i<n;i++)
            for(int j=i;j<n;j++)//遍历所有[i,j]
            {
                int mid=(i+j)>>1;//找中点 中点必是此时区间内的最优解！
                for(int k=i;k<=j;k++)//遍历[i,j] 求出此时最优解
                    rec[i][j]+=abs(houses[mid]-houses[k]);
            }

        //dp[i][j]表示[0,i]区间内,j个邮局的最优解
        vector<vector<int>> dp(n,vector<int>(K+1,2e9));
        for(int i=0;i<n;i++)
            dp[i][1]=rec[0][i];//初始化 有一个邮局的最优解可以由rec得到
        for(int i=0;i<n;i++)//遍历所有[0,i]区间
            for(int j=2;j<=min(i+1,K);j++)//j代表邮局个数 只有一个邮局的情况已经求解了 所以j从2开始 且邮局个数不能超出当前位置
                for(int k=j-1;k<=i;k++)//k表示在[0,i]区间内最后一个邮局负责的区间在哪里最佳
                    dp[i][j]=min(dp[i][j],dp[k-1][j-1]+rec[k][i]);
        return dp[n-1][K];
    }
};