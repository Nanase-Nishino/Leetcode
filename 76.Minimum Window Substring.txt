//Sliding Window
//Containing all characters of t and their frequency in a hash_map
//Conatining all characters of current Sliding-Window and their frequency
in the other hash_map
//Expand the Window by rightshifting the R pointer until all t characters are included 
in the hash_map.Then we leftshifting the L pointer to find out what the minimum substring is.

class Solution {
private:
    unordered_map<char,int> ori,cnt;
    bool check()
    {
        for(const auto& p:ori)
            if(cnt[p.first]<p.second)
                return false;
        return true;
    }
public:
    string minWindow(string s, string t) {
        for(const auto& c:t)
            ori[c]++;
        int len=INT_MAX,l=0,r=-1,ansL=-1;
        while(r+1<int(s.size()))          //Pay attention to the last digit of string is '\0'.
        {
            if(ori.find(s[++r])!=ori.end())
                ++cnt[s[r]];
            while(check()&&l<=r)
            {
                if(r-l+1<len)
                {
                    len=r-l+1;
                    ansL=l;
                }
                if(ori.find(s[l])!=ori.end())
                    --cnt[s[l]];
                l++;
            }
        }
        return ansL==-1?"":s.substr(ansL,len);
    }
};

//Optimization 1