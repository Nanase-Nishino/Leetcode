//BFS BFS的特性决定找到的第一个即为最短路径
class Solution {
public:
    static constexpr int dx[4]={-1,0,1,0},dy[4]={0,1,0,-1};
    static constexpr int MAX_N=100+5;
    struct Coordinate
    {
        int x,y,step;
    };
    int n,m;
    vector<vector<int>> a;
    bool vis[MAX_N][MAX_N];
    int findNearestLand(int x,int y)
    {
        memset(vis,0,sizeof vis);
        queue<Coordinate> q;
        q.push({x,y,0});
        vis[x][y]=1;
        while(!q.empty())
        {
            auto f=q.front();
            q.pop();
            for(int i=0;i<4;i++)
            {
                int nx=f.x+dx[i],ny=f.y+dy[i];
                if(!(nx>=0&&nx<=n-1&&ny>=0&&ny<=m-1))
                    continue;
                if(!vis[nx][ny])
                {
                    q.push({nx,ny,f.step+1});
                    vis[nx][ny]=1;
                    if(a[nx][ny])
                        return f.step+1;
                }
            }
        }
        return -1;
    }
    int maxDistance(vector<vector<int>>& grid) {
        this->n=grid.size();
        this->m=grid[0].size();
        a=grid;
        int ans=-1;
        for(int i=0;i<n;i++)
            for(int j=0;j<m;j++)
            {
                if(!a[i][j])
                    ans=max(ans,findNearestLand(i,j));
            }
        return ans;
    }
};

//求所有的海洋区域到陆地区域的最短路径 不是单源最短路径SSSP问题 如dijkstra和SPFA算法
//求任意两点之间最短路径可用Floyd 但是此时点为一个集合 Floyd的时间复杂度为O(v^3) v在此时为n^2 即时间复杂度为O(n^6) 不可能
//所以问题的本质是集合到集合的最短路径 

//dijkstra的堆优化首先用一个优先队列 第一步将源点入队 将集合中的所有点入队 改造成SSSP问题
class Solution {
public:
    static constexpr int MAX_N=100+5;
    static constexpr int INF=int(1E6);
    static constexpr int dx[4]={-1,0,1,0},dy[4]={0,1,0,-1};
    int n;
    int d[MAX_N][MAX_N];
    struct Status
    {
        int v,x,y;
        bool operator < (const Status &rhs) const{return v>rhs.v;} 
    };
    priority_queue<Status> q;
    int maxDistance(vector<vector<int>>& grid) {
        this->n=grid.size();
        auto &a=grid;
        for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
                d[i][j]=INF;
        for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
                if(a[i][j])
                {
                    d[i][j]=0;
                    q.push({0,i,j});
                }
        while(!q.empty())
        {
            auto f=q.top();
            q.pop();
            for(int i=0;i<4;i++)
            {
                int nx=f.x+dx[i],ny=f.y+dy[i];
                if(!(nx>=0&&nx<n&&ny>=0&&ny<n))
                    continue;
                if(f.v+1<d[nx][ny])
                {
                    d[nx][ny]=f.v+1;
                    q.push({d[nx][ny],nx,ny});
                }
            }
        }
        int ans=-1;
        for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
                if(!a[i][j])
                    ans=max(ans,d[i][j]);
        return (ans==INF)?-1:ans;
    }
};

//多源BFS
class Solution {
public:
    static constexpr int MAX_N=100+5;
    static constexpr int INF=int(1E6);
    static constexpr int dx[4]={-1,0,1,0},dy[4]={0,1,0,-1};
    int n;
    int d[MAX_N][MAX_N];
    struct Coordinate
    {
        int x,y;
    };
    queue<Coordinate> q;
    int maxDistance(vector<vector<int>>& grid) {
        this->n=grid.size();
        auto &a=grid;
        for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
                d[i][j]=INF;
        for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
                if(a[i][j])
                {
                    d[i][j]=0;
                    q.push({i,j});
                }
        while(!q.empty())
        {
            auto f=q.front();
            q.pop();
            for(int i=0;i<4;i++)
            {
                int nx=f.x+dx[i],ny=f.y+dy[i];
                if(!(nx>=0&&nx<n&&ny>=0&&ny<n))
                    continue;
                if(d[nx][ny]>d[f.x][f.y]+1)
                {
                    d[nx][ny]=d[f.x][f.y]+1;
                    q.push({nx,ny});
                }
            }
        }
        int ans=-1;
        for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
                if(!a[i][j])
                    ans=max(ans,d[i][j]);
        return (ans==INF)?-1:ans;
    }
};

//SPFA 最快
class Solution {
public:
    static constexpr int MAX_N=100+5;
    static constexpr int INF=int(1E6);
    static constexpr int dx[4]={-1,0,1,0},dy[4]={0,1,0,-1};
    int n;
    int d[MAX_N][MAX_N];
    struct Coordinate
    {
        int x,y;
    };
    queue<Coordinate> q;
    bool inq[MAX_N][MAX_N];
    int maxDistance(vector<vector<int>>& grid) {
        this->n=grid.size();
        auto &a=grid;
        for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
                d[i][j]=INF;
        for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
                if(a[i][j])
                {
                    d[i][j]=0;
                    q.push({i,j});
                    inq[i][j]=1;
                }
        while(!q.empty())
        {
            auto f=q.front();
            q.pop();
            inq[f.x][f.y]=0;
            for(int i=0;i<4;i++)
            {
                int nx=f.x+dx[i],ny=f.y+dy[i];
                if(!(nx>=0&&nx<n&&ny>=0&&ny<n))
                    continue;
                if(d[nx][ny]>d[f.x][f.y]+1)
                {
                    d[nx][ny]=d[f.x][f.y]+1;
                    if(!inq[nx][ny])
                    {
                        q.push({nx,ny});
                        inq[nx][ny]=1;
                    }
                }
            }
        }
        int ans=-1;
        for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
                if(!a[i][j])
                    ans=max(ans,d[i][j]);
        return (ans==INF)?-1:ans;
    }
};

//动态规划
//对每个海洋区域 离它最近的陆地区域 从上左/右下做两个方向的动态规划
class Solution {
public:
    static constexpr int MAX_N=100+5;
    static constexpr int INF=int(1E6);
    int f[MAX_N][MAX_N];
    int n;
    int maxDistance(vector<vector<int>>& grid) {
        this->n=grid.size();
        auto &a=grid;
        for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
                f[i][j]=(a[i][j]?0:INF);
        for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
            {
                if(a[i][j])
                    continue;
                if(i-1>=0)
                    f[i][j]=min(f[i][j],f[i-1][j]+1);
                if(j-1>=0)
                    f[i][j]=min(f[i][j],f[i][j-1]+1);
            }
        for(int i=n-1;i>=0;i--)
            for(int j=n-1;j>=0;j--)
            {
                if(a[i][j])
                    continue;
                if(i+1<n)
                    f[i][j]=min(f[i][j],f[i+1][j]+1);
                if(j+1<n)
                    f[i][j]=min(f[i][j],f[i][j+1]+1);
            }
        int ans=-1;
        for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
                if(!a[i][j])
                    ans=max(ans,f[i][j]);
        return ans==INF?-1:ans;
    }
};
