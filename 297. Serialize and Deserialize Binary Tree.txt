/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

//括号表示编码+递归下降解码！

class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        if(!root)
            return "X";
        string l="("+serialize(root->left)+")";
        string r="("+serialize(root->right)+")";
        return l+to_string(root->val)+r;
    }

    inline TreeNode* parseSubtree(const string& data,int& ptr)
    {
        ptr++;//过滤掉左括号
        TreeNode* subtree=parse(data,ptr);//重点！！过滤之后再回到parse生成树！
        ptr++;//过滤掉右括号
        return subtree;
    }

    inline int parseInt(const string& data,int& ptr)
    {
        int x=0,sgn=1;
        if(!isdigit(data[ptr]))
        {
            sgn=-1;
            ptr++;
        }
        while(isdigit(data[ptr]))
            x=x*10+data[ptr++]-'0';
        return x*sgn;
    }

    TreeNode* parse(const string& data,int& ptr)
    {
        if(data[ptr]=='X')
        {
            ptr++;
            return nullptr;
        }
        TreeNode* cur=new TreeNode(0);
        cur->left=parseSubtree(data,ptr);
        cur->val=parseInt(data,ptr);
        cur->right=parseSubtree(data,ptr);
        return cur;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        int ptr=0;
        return parse(data,ptr);
    }
};

// Your Codec object will be instantiated and called as such:
// Codec codec;
// codec.deserialize(codec.serialize(root));