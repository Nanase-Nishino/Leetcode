//让链表头入队 优先队列 时间复杂度为OnlogK 主要时间花在排序上
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    struct cmp
    {
        bool operator()(ListNode* a,ListNode* b)
        {
            return a->val>b->val;//小根堆！  top是最小
        }
    };
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        priority_queue<ListNode*,vector<ListNode*>,cmp> p;
        for(ListNode* x:lists)
        {
            if(x)
                p.push(x);
        }
        ListNode* dummy=new ListNode(-1);
        ListNode* h=dummy;
        while(!p.empty())
        {
            ListNode* q=p.top();
            p.pop();
            h->next=q;
            h=q;
            if(q->next)
                p.push(q->next);
        }
        return dummy->next;
    }
};

//两两合并 递归 时间复杂度为On^2k
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* merge(ListNode* p1,ListNode* p2)
    {
        if(!p1)
            return p2;
        if(!p2)
            return p1;
        if(p1->val<=p2->val)
        {
            p1->next=merge(p1->next,p2);
            return p1;
        }
        else
        {
            p2->next=merge(p2->next,p1);
            return p2;
        }
    }
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size()==0)
            return nullptr;
        ListNode* head=lists[0];
        for(int i=1;i<lists.size();i++)
            if(lists[i])
                head=merge(head,lists[i]);
        return head;
    }
};

//分治 递归数的思想 能使时间复杂度从n降至logn
//重载 
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* merge(ListNode* p1,ListNode* p2)
    {
        if(!p1)
            return p2;
        if(!p2)
            return p1;
        if(p1->val<=p2->val)
        {
            p1->next=merge(p1->next,p2);
            return p1;
        }
        else
        {
            p2->next=merge(p2->next,p1);
            return p2;
        }
    }
    ListNode* merge(vector<ListNode*>& lists,int start,int end)
    {
        if(start==end)
            return lists[start];
        int mid=(start+end)/2;
        ListNode* l1=merge(lists,start,mid);
        ListNode* l2=merge(lists,mid+1,end);
        return merge(l1,l2);
    }
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size()==0)
            return nullptr;
        return merge(lists,0,lists.size()-1);
    }
};