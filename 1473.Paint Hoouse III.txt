//dp state::dp[i][j][k] 为当前第i个房子涂第j种颜色生成k+1个街区的最小花费
//dp base ::1.houses[0]有颜色,则遍历颜色。2.若没有颜色,则赋值为0.
//dp func ::1.若新房子有颜色，则继承上一个房子所有颜色的花费。若颜色不一样，街区+1.
	    2.若新房子没有颜色，则循环涂上颜色。颜色一样街区一样，颜色不一样街区+1.

class Solution {
public:
    int minCost(vector<int>& houses, vector<vector<int>>& cost, int m, int n, int target) {
        vector<vector<vector<int>>> dp(m,vector<vector<int>>(n+1,vector<int>(target+1,INT_MAX)));
        if(!houses[0])
            for(int j=1;j<=n;j++)
                dp[0][j][0]=cost[0][j-1];
        else
            dp[0][houses[0]][0]=0;

        for(int i=1;i<m;i++)
            for(int j=1;j<=n;j++)
                for(int k=0;k<target;k++)
                {
                    if(!houses[i])
                        for(int j_old=1;j_old<=n;j_old++)
                        {
                            if(dp[i-1][j_old][k]==INT_MAX)
                                continue;
                            if(j_old==j)
                                dp[i][j][k]=min(dp[i-1][j_old][k]+cost[i][j-1],dp[i][j][k]);
                            else
                                dp[i][j][k+1]=min(dp[i-1][j_old][k]+cost[i][j-1],dp[i][j][k+1]);
                        }
                    else
                    {
                        if(dp[i-1][j][k]==INT_MAX)
                            continue;
                        if(houses[i]==j)
                            dp[i][j][k]=min(dp[i-1][j][k],dp[i][j][k]);
                        else
                            dp[i][houses[i]][k+1]=min(dp[i-1][j][k],dp[i][houses[i]][k+1]);
                    }
                }
        int ans=INT_MAX;
        for(int j=1;j<=n;j++)
        {
            ans=min(dp[m-1][j][target-1],ans);
        }
        return ans==INT_MAX?-1:ans;
    }
};