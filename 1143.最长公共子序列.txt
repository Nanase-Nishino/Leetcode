//基础dp 子序列问题一般用动态规划求解
class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int len1=text1.size(),len2=text2.size();
        vector<vector<int>> dp(len1+1,vector<int>(len2+1,0));
        for(int i=1;i<=len1;i++)
            for(int j=1;j<=len2;j++)
            {
                if(text1[i-1]==text2[j-1])
                    dp[i][j]=dp[i-1][j-1]+1;
                else
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        return dp[len1][len2];
    }
};

//压缩空间dp 每次初始的dp[i-1][j-1]一定为0 用last在每次遍历一行时指代初始值
class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int m=text1.size(),n=text2.size();
        vector<int> dp(n+1,0);
        for(int i=1;i<=m;i++)
        {
            int last=0;//last=dp[i-1][j-1] 
            for(int j=1;j<=n;j++)
            {
                int tmp=dp[j];
                if(text1[i-1]==text2[j-1])
                    dp[j]=last+1;
                else
                    dp[j]=max(dp[j-1],tmp);
                last=tmp;
            }
        }
        return dp[n];
    } 
};