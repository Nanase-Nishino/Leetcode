//广度搜索
class Solution {
public:
    int get(int x)
    {
        int res=0;
        while(x>0)
        {
            res+=(x%10);
            x/=10;
        }
        return res;
    }
    int movingCount(int m, int n, int k) {
        if(!k)
            return 1;
        int dx[2]={0,1};
        int dy[2]={1,0};
        queue<pair<int,int>> q;
        vector<vector<int>> vis(m,vector<int>(n,0));
        q.push(make_pair(0,0));
        vis[0][0]=1;
        int ans=1;
        while(!q.empty())
        {
            auto [x,y]=q.front();
            q.pop();
            for(int i=0;i<2;i++)
            {
                int tx=x+dx[i];
                int ty=y+dy[i];
                if(tx<0||tx>=m||ty<0||ty>=n||vis[tx][ty]||get(tx)+get(ty)>k)
                    continue;
                q.push(make_pair(tx,ty));
                vis[tx][ty]=1;
                ans++;
            }
        }
        return ans;
    }
};

//递推 用一种连通的思想 所有能到达的格子 本质上都由0,0连通而来 设1为可连通 0为不可连通 用非逻辑运算符即可
class Solution {
public:
    int get(int x)
    {
        int res=0;
        while(x>0)
        {
            res+=(x%10);
            x/=10;
        }
        return res;
    }
    int movingCount(int m, int n, int k) {
        if(!k)
            return 1;
        vector<vector<int>> vis(m,vector<int>(n,0));
        int ans=1;
        vis[0][0]=1;
        for(int i=0;i<m;i++)
            for(int j=0;j<n;j++)
            {
                if((i==0&&j==0)||get(i)+get(j)>k)
                    continue;
                if(i-1>=0)
                    vis[i][j]|=vis[i-1][j];
                if(j-1>=0)
                    vis[i][j]|=vis[i][j-1];
                ans+=vis[i][j];
            }
        return ans;
    }
};
//优化 用一行存储 
class Solution {
public:
    int get(int x)
    {
        int res=0;
        while(x>0)
        {
            res+=(x%10);
            x/=10;
        }
        return res;
    }
    int movingCount(int m, int n, int k) {
        if(!k)
            return 1;
        vector<int> vis(n,0);
        int ans=0;
        for(int j=0;j<n;j++)//初始化 连通的思想 不是就break
        {
            if(get(j)<=k)
            {
                vis[j]=1;
                ans+=1;
            }
            else
                break;
        }
        for(int i=1;i<m;i++)
        {
            if(get(i)<=k)
            {
                vis[0]=1;
                ans+=1;
            }
            else 
                break;
            for(int j=1;j<n;j++)
            {
                if((vis[j-1]||vis[j])&&(get(i)+get(j)<=k))
                {
                    vis[j]=1;
                    ans+=1;
                }
                else
                    vis[j]=0;
            }
        }
        return ans;
    }
};

//DFS
class Solution {
public:
    int get(int x)
    {
        int res=0;
        while(x>0)
        {
            res+=(x%10);
            x/=10;
        }
        return res;
    }
    int m,n,k;
    int dfs(int x,int y,vector<vector<int>>& vis)
    {
        if(x<0||x>=m||y<0||y>=n||vis[x][y]||get(x)+get(y)>k)
            return 0;
        vis[x][y]=1;
        return 1+dfs(x+1,y,vis)+dfs(x,y+1,vis);
    }
    int movingCount(int m, int n, int k) {
        if(!k)
            return 1;
        this->n=n;this->m=m;this->k=k;
        vector<vector<int>> vis(m,vector<int>(n,0));
        return dfs(0,0,vis);
    }
};