//backwards!

class Solution {
public:
    int backtrack(string &s,int pos)
    {
        int n=s.size();
        if(pos==n)     
            return 1;
        if(pos==n-1||s[pos]=='0'||s.substr(pos,2)>"25")
            return backtrack(s,pos+1);
        return backtrack(s,pos+1)+backtrack(s,pos+2);
    }
    int translateNum(int num) {
        string s=to_string(num);
        return backtrack(s,0);
    }
};


//dp

class Solution {
public:
    int translateNum(int num) {
        string src = to_string(num);
        int p = 0, q = 0, r = 1;
        for (int i = 0; i < src.size(); ++i) {
            p = q; 
            q = r; 
            r = 0;
            r += q;
            if (i == 0) {
                continue;
            }
            auto pre = src.substr(i - 1, 2);
            if (pre <= "25" && pre >= "10") {
                r += p;
            }
        }
        return r;
    }
};

//Recursion

class Solution {
public:
    int translateNum(int num) {
        if(num<10)
            return 1;
        return (num%100<10||num%100>25)?translateNum(num/10):translateNum(num/10)+translateNum(num/100);
    }
};
