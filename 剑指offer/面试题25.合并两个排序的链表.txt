/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
//

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* head=new ListNode(-1);
        ListNode* root=head;
        while(l1&&l2)
        {
            ListNode* temp;
            if(l1->val<l2->val)
            {
                temp=l1;
                l1=l1->next;
            }
            else
            {
                temp=l2;
                l2=l2->next;
            }
            head->next=temp;
            head=head->next;
        }
        head->next=(!l1?l2:l1);
        return root->next;
    }
};
//递归

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(!l1)
            return l2;
        if(!l2)
            return l1;
        if(l1->val<l2->val)
        {
            l1->next=mergeTwoLists(l1->next,l2);
            return l1;
        }
        else
        {
            l2->next=mergeTwoLists(l1,l2->next);
            return l2;
        }
    }
};

//

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(!l1)
            return l2;
        if(!l2)
            return l1;
        ListNode* head=new ListNode(l1->val<l2->val?l1->val:l2->val);
        if(l1->val<l2->val)
            head->next=mergeTwoLists(l1->next,l2);
        else
            head->next=mergeTwoLists(l1,l2->next);
        return head;
    }
};