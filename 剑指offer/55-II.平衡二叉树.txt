//后序遍历

class Solution {
private:
    int dfs(TreeNode* root)
    {
        if(!root)
            return 0;
        int L=dfs(root->left);
        //剪枝
        if(L==-1)
            return -1;
        int R=dfs(root->right);
        if(R==-1)
            return -1;
        return abs(L-R)<2?max(L,R)+1:-1;
    }
public:
    bool isBalanced(TreeNode* root) {
        return dfs(root)!=-1;
    }
};

//前序遍历

class Solution {
private:
    int dfs(TreeNode* root)
    {
        if(!root)
            return -1;
        return 1+max(dfs(root->left),dfs(root->right));
    }
public:
    bool isBalanced(TreeNode* root) {
        if(!root)
            return true;
        return abs(dfs(root->left)-dfs(root->right))<2&&isBalanced(root->left)&&isBalanced(root->right);
    }
};