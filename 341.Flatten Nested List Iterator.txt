/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * class NestedInteger {
 *   public:
 *     // Return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool isInteger() const;
 *
 *     // Return the single integer that this NestedInteger holds, if it holds a single integer
 *     // The result is undefined if this NestedInteger holds a nested list
 *     int getInteger() const;
 *
 *     // Return the nested list that this NestedInteger holds, if it holds a nested list
 *     // The result is undefined if this NestedInteger holds a single integer
 *     const vector<NestedInteger> &getList() const;
 * };
 */


//栈

class NestedIterator {
private:
    stack<NestedInteger> st;
public:
    NestedIterator(vector<NestedInteger> &nestedList) {
        for(auto it=nestedList.rbegin();it!=nestedList.rend();it++)
            st.push(*it);
    }
    
    int next() {
        auto cur=st.top();
        st.pop();
        return cur.getInteger();
    }
    
    bool hasNext() {
        while(!st.empty())
        {
            auto cur=st.top();
            if(cur.isInteger())
                return true;
            st.pop();//注意这个顺序 如果在return true之前弹出 则在下一个next()会得不到cur
            auto curList=cur.getList();
            for(auto it=curList.rbegin();it!=curList.rend();it++)
                st.push(*it);
        }
        return false;
    }
};


//构造一个递归进行预处理

class NestedIterator {
private:
    stack<NestedInteger> st;
public:
    NestedIterator(vector<NestedInteger> &nestedList) {
        for(auto it=nestedList.rbegin();it!=nestedList.rend();it++)
            phrase(*it);
    }

    void phrase(NestedInteger& it)
    {
        if(it.isInteger())
            st.push(it);
        else
        {
            auto curList=it.getList();
            for(auto x=curList.rbegin();x!=curList.rend();x++)
                phrase(*x);
        }
    }
    
    int next() {
        auto cur=st.top();
        st.pop();
        return cur.getInteger();
    }
    
    bool hasNext() {
        if(st.empty())
            return false;
        return true;
    }
};

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i(nestedList);
 * while (i.hasNext()) cout << i.next();
 */