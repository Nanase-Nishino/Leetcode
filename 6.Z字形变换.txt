//取巧 利用转折关系转换行列字符串
class Solution {
public:
    string convert(string s, int numRows) {
        int n=s.size();
        if(n<2||numRows==1)
          return s;
        
        vector<string> row(min(n,numRows));
        bool goingDown=false;
        int curRow=0;

        for(char v:s)
        {
            row[curRow]+=v;
            if(curRow==0||curRow==numRows-1)
              goingDown=!goingDown;
            curRow+=goingDown?1:-1;
        }

        string res;
        for(string v:row)
        {
            res+=v;
        }

        return res;
    }
};

//利用间隔关系 step=2*numRows-2  
//除了第0和numRows-1层 其余都是step-2*行数与2*行数交替
class Solution {
public:
    string convert(string s, int numRows) {
        int n=s.size();
        if(n<2||numRows==1)
          return s;
        
        int index;//下标索引
        int step=2*numRows-2;
        int add=0;

        string res;
        for(int i=0;i<numRows;i++)//i表示行号
        {
            index=i;
            add=2*i;
            while(index<n)
            {
                res+=s[index];
                add=step-add;//除了0和numRows-1层 其余间隔都是交替
                index+=(i==0||i==numRows-1)?step:add;
            }
        }
        return res;
    }
};