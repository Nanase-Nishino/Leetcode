//防止-prices溢出
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int len=prices.size();
        if(len==0)
            return 0;
        int d[len+1][3][2]={0};
        d[0][0][0]=INT_MIN+100000;
        d[0][0][1]=INT_MIN+100000;
        d[0][1][1]=-prices[0];
        d[0][1][0]=INT_MIN+100000;
        d[0][2][0]=0;
        d[0][2][1]=INT_MIN+100000;
        for(int i=1;i<len;i++)
            for(int k=1;k>=0;k--)
            {
                d[i][k][0]=max(d[i-1][k][0],d[i-1][k][1]+prices[i]);
                d[i][k][1]=max(d[i-1][k][1],d[i-1][k+1][0]-prices[i]);
            }
        return max(0,max(d[len-1][1][0],d[len-1][0][0]));
    }
};

//优化空间复杂度 每一次状态只与上一次相关
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int len=prices.size();
        if(len==0)
            return 0;
        int d[2][3][2]={0};
        d[0][0][0]=INT_MIN+100000;
        d[0][0][1]=INT_MIN+100000;
        d[0][1][1]=-prices[0];
        d[0][1][0]=INT_MIN+100000;
        d[0][2][0]=0;
        d[0][2][1]=INT_MIN+100000;
        for(int i=1;i<len;i++)
            for(int k=1;k>=0;k--)
            {
                d[i%2][k][0]=max(d[(i+1)%2][k][0],d[(i+1)%2][k][1]+prices[i]);
                d[i%2][k][1]=max(d[(i+1)%2][k][1],d[(i+1)%2][k+1][0]-prices[i]);
            }
        return max(0,max(d[(len-1)%2][1][0],d[(len-1)%2][0][0]));
    }
};