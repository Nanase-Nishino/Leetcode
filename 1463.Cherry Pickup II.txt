const int N = 75;
int dp[N][N][N];
int dx[3] = {-1, 0, 1};

class Solution {
public:
    int cherryPickup(vector<vector<int>>& grid) {
        memset(dp, 0, sizeof dp);
        int n = grid.size(), m = grid[0].size();
        dp[0][0][m - 1] = grid[0][0] + grid[0][m - 1];
        for (int i = 1; i < n; i ++ )
        {
            for (int j1 = 0; j1 < m; j1 ++ )
            {
                //optimizition
                if (j1 > i) continue;
                for (int j2 = j1 + 1; j2 < m; j2 ++ )
                {
                    //optimizition
                    if (j2 < m - 1 - i) continue;

                    for (int d1 = 0; d1 < 3; d1 ++ )
                        for (int d2 = 0; d2 < 3; d2 ++ )
                        {
                            int p1 = j1 + dx[d1], p2 = j2 + dx[d2];
                            if (p1 < 0 || p1 >= m || p2 < 0 || p2 >= m) continue;

                            if (j1 == j2) dp[i][j1][j2] = max(dp[i][j1][j2], dp[i - 1][p1][p2] + grid[i][j1]);
                            else dp[i][j1][j2] = max(dp[i][j1][j2], dp[i - 1][p1][p2] + grid[i][j1] + grid[i][j2]);
                        }
                }
            }
        }
        
        int ans = 0;
        for (int i = 0; i < m; i ++ )
            for (int j = i + 1; j < m; j ++ )
            {
                ans = max(ans, dp[n - 1][i][j]);
            }
        
        return ans;
    }
};