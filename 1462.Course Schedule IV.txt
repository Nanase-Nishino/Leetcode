//Floyd!!!
//Which can judge whether there is a transitive relationship between two nodes.!!!

class Solution {
private:
    const static int N=110;
    const int INF=0x3f3f3f3f;
    int g[N][N];
    void floyd(int n)
    {
        for(int k=0;k<n;k++)
            for(int i=0;i<n;i++)
                for(int j=0;j<n;j++)
                    g[i][j]=min(g[i][j],g[i][k]+g[k][j]);
    }
public:
    vector<bool> checkIfPrerequisite(int n, vector<vector<int>>& prerequisites, vector<vector<int>>& queries) {
        memset(g,0x3f,sizeof(g));
        for(int i=0;i<prerequisites.size();i++)
            g[prerequisites[i][0]][prerequisites[i][1]]=1;
        
        for(int i=0;i<n;i++)
            g[i][i]=1;
        
        floyd(n);
        vector<bool> res;
        for(int i=0;i<queries.size();i++)
        {
            if(g[queries[i][0]][queries[i][1]]>=INF/2)
                res.emplace_back(false);
            else
                res.emplace_back(true);
        }
        return res;
    }
};

//DFS

class Solution {
private:
    vector<vector<int>> edges;
    bool dfs(int start,int end,vector<vector<int>>& visited)
    {
        if(start==end)
        {
            visited[start][end]=1;
            return true;
        }
        if(visited[start][end]!=-1)
            return visited[start][end];
        for(int x:edges[start])
            if(dfs(x,end,visited))
                return true;
        visited[start][end]=0;
        return false;
    }
public:
    vector<bool> checkIfPrerequisite(int n, vector<vector<int>>& prerequisites, vector<vector<int>>& queries) {
        edges.resize(n);
        vector<vector<int>> visited(n,vector<int>(n,-1));
        for(const auto& info:prerequisites)
            edges[info[0]].emplace_back(info[1]);
        vector<bool> res;
        for(const auto& info:queries)
            res.emplace_back(dfs(info[0],info[1],visited));
        return res;
    }
};