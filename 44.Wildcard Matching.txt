//动态规划
//dp[i][j]代表s的前i个字符和p的前j个字符是否能匹配
//dp[0][0]代表s,p均为空字符串
//1.p[j]为字符 此时dp[i][j]=(s[i]==p[j]&&dp[i-1][j-1])
//2.p[j]为'?'  此时dp[i][j]=dp[i-1][j-1]
//3.p[j]为'*'  
//3.1 使用* dp[i][j]=dp[i-1][j]
//3.2 不用* dp[i][j]=dp[i][j-1]
//即 dp[i][j]=(dp[i-1][j]||dp[i][j-1])
//注意dp[0][j] 此时当p的前j个字符都为*时 dp[0][j]为true

class Solution {
public:
    bool isMatch(string s, string p) {
        int m=s.size();
        int n=p.size();
        vector<vector<int>> dp(m+1,vector<int>(n+1,0));
        dp[0][0]=true; //0代表s,p均为空字符
        for(int i=1;i<=n;i++)
        {
            if(p[i-1]=='*')
                dp[0][i]=true;
            else
                break;
        }
        for(int i=1;i<=m;i++)
            for(int j=1;j<=n;j++)
            {
                if(p[j-1]=='*')
                    dp[i][j]=dp[i-1][j]|dp[i][j-1];
                else if(p[j-1]=='?'||s[i-1]==p[j-1])
                    dp[i][j]=dp[i-1][j-1];
            }
        return dp[m][n];
    }
};