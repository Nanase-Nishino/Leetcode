//旋转矩阵时 对应关系为matrix[i][j]=matrix[j][n-i-1]
//matrix[i][j]=matrix[n-j-1][i]//旋转 此时被前一个所覆盖
//matrix[n-j-1][i]=matrix[n-i-1][n-j-1]
//matrix[n-i-1][n-j-1]=matrix[j][n-i-1]
//matrix[j][n-i-1]=matrix[i][j]
//一个矩阵 若行为偶数 可以分为4个小矩阵进行旋转 长宽都为n/2
//一个矩阵 若行为奇数 去掉中心点 因为中心点旋转后不变 也可以分为4个小矩阵进行旋转 长为(n+1)/2 宽为n/2
class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int n=matrix.size();
        for(int i=0;i<(n>>1);i++)
            for(int j=0;j<((n+1)>>1);j++)
            {
                int temp=matrix[i][j];
                matrix[i][j]=matrix[n-j-1][i];
                matrix[n-j-1][i]=matrix[n-i-1][n-j-1];
                matrix[n-i-1][n-j-1]=matrix[j][n-i-1];
                matrix[j][n-i-1]=temp;
            }
    }
};

//先水平翻转 再对角线翻转 
class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int n=matrix.size();
        for(int i=0;i<n/2;i++)
            for(int j=0;j<n;j++)
                swap(matrix[i][j],matrix[n-i-1][j]);
        for(int i=0;i<n;i++)
            for(int j=0;j<i;j++)//对角线翻转注意 j<i
                swap(matrix[i][j],matrix[j][i]);
    }
};

//先对角线翻转 再竖直翻转
class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int n=matrix.size();
        for(int i=0;i<n;i++)
            for(int j=0;j<i;j++)
                swap(matrix[i][j],matrix[j][i]);
        for(int i=0;i<n;i++)
            for(int j=0;j<(n>>1);j++)
                swap(matrix[i][j],matrix[i][n-j-1]);
    }
};
