//枚举前缀和后缀
//假设s1+s2是一个回文串 len1和len2为s1和s2的长度
//len1==len2 s1是s2的翻转
//len1!=len2 将较长的字符串拆成左右两部分 t1是s2的翻转 t2是一个回文串

//那么枚举每一个字符串k 分成t1和t2 判断是否为回文串 
//如果其中一个是 就查询剩余部分是否在给定的字符串序列中出现即可
//空串也是回文串


class Solution {
private:
    vector<string> wordsRev;
    unordered_map<string_view,int> indices;
public:
    int findWord(const string_view& s,int left,int right)
    {
        auto iter=indices.find(s.substr(left,right-left+1));
        return iter==indices.end()?-1:iter->second;
    }

    bool isPalindrome(const string_view& s,int left,int right)
    {
        int len=right-left+1;
        for(int i=0;i<len/2;i++)
        {
            if(s[left+i]!=s[right-i])
                return false;
        }
        return true;
    }

    vector<vector<int>> palindromePairs(vector<string>& words) {
        int n=words.size();
        for(const string& word:words)
        {
            wordsRev.push_back(word);
            reverse(wordsRev.back().begin(),wordsRev.back().end());
        }
        for(int i=0;i<n;i++)
        {
            indices.emplace(wordsRev[i],i);
        }

        vector<vector<int>> res;
        for(int i=0;i<n;i++)
        {
            int m=words[i].size();
            if(!m)
                continue;
            string_view wordView(words[i]);
            for(int j=0;j<=m;j++)
            {
                //枚举后缀
                if(isPalindrome(wordView,j,m-1))
                {
                    //枚举前缀
                    int left_id=findWord(wordView,0,j-1);
                    if(left_id!=-1&&left_id!=i)
                        res.push_back({i,left_id});
                }
                if(j&&isPalindrome(wordView,0,j-1))
                {
                    int right_id=findWord(wordView,j,m-1);
                    if(right_id!=-1&&right_id!=i)
                        res.push_back({right_id,i});
                }
            }
        }
        return res;
    }
};