//重构字符串

class Solution {
public:
    bool backspaceCompare(string S, string T) {
        string s,t;
        for(int i=0;i<S.size();i++){
            if(S[i]=='#'&&!s.empty())
                s.pop_back();
            else if(S[i]!='#')
                s+=S[i];
        }
        for(int i=0;i<T.size();i++){
            if(T[i]=='#'&&!t.empty())
                t.pop_back();
            else if(T[i]!='#')
                t+=T[i];
        }
        return s==t;
    }
};

//双指针
//空间复杂度O(1)
//确定最后一个能确定的字符

class Solution {
public:
    bool backspaceCompare(string S, string T) {
        int i=S.size()-1,j=T.size()-1;
        int skipS=0,skipT=0;
        while(i>=0||j>=0){
            while(i>=0){
                if(S[i]=='#'){
                    skipS++;
                    i--;
                }
                else if(skipS>0){
                    skipS--;
                    i--;
                }
                else{
                    break;
                }
            }
            while(j>=0){
                if(T[j]=='#'){
                    skipT++;
                    j--;
                }
                else if(skipT>0){
                    skipT--;
                    j--;
                }
                else{
                    break;
                }
            }
            if(i>=0&&j>=0){
                if(S[i]!=T[j])
                    return false;
            }
            else{
                if(i>=0||j>=0)
                    return false;
            }
            i--;
            j--;
        }
        return true;
    }
};