/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
//Reverse back half linked list
public:
    bool isPalindrome(ListNode* head) {
        if(!head||!head->next)
            return true;
        ListNode *slow=head,*fast=head;
        while(fast&&fast->next)
        {
            slow=slow->next;
            fast=fast->next->next;
        }
        ListNode *nextNode=slow->next,*curNode=slow;
        while(nextNode)
        {
            ListNode *tmp=nextNode->next;
            nextNode->next=curNode;//Reverse
            curNode=nextNode;
            nextNode=tmp;
        }
        //NOTICE!!
        slow->next=nullptr;
        bool flag=true;
        while(head&&curNode)
        {
            if(head->val!=curNode->val)
            {flag=false;break;}
            head=head->next;
            curNode=curNode->next;
        }
        //recovery
        return flag;
    }
};

//recursion
//the idea of stack

class Solution {
public:
    ListNode *p;
    bool check(ListNode *curNode)
    {
        if(curNode)
        {
            if(!check(curNode->next))
                return false;
            if(p->val!=curNode->val)
                return false;
            p=p->next;
        }
        return true;
    }
    bool isPalindrome(ListNode* head) {
        p=head;
        return check(head);
    }
};