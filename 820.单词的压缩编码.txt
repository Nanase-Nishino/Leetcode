//后缀压缩 substr求后缀
class Solution {
public:
    int minimumLengthEncoding(vector<string>& words) {
        int cnt=0;
        unordered_set<string> v(words.begin(),words.end());
        for(string x:v)        
            for(int k=1;k<x.size();k++)
                v.erase(x.substr(k));
        for(string x:v)
            cnt+=x.size()+1;
        return cnt;
    }
};

//字典树
class TrieNode
{
    TrieNode* children[26];
    public:
    int count;
    TrieNode()//初始化
    {
        for(int i=0;i<26;i++)
            children[i]=NULL;
        count=0;
    }
    TrieNode* get(char x)
    {
        if(children[x-'a']==NULL)
        {
            children[x-'a']=new TrieNode();
            count++;
        }
        return children[x-'a'];
    }
};
class Solution {
public:
    int minimumLengthEncoding(vector<string>& words) {
        TrieNode* trie=new TrieNode();
        unordered_map<TrieNode*,int> nodes;
        for(int i=0;i<words.size();i++)
        {
            string word=words[i];
            TrieNode* cur=trie;
            for(int j=word.size()-1;j>=0;j--)
            {
                cur=cur->get(word[j]);//关键 更新当前无后缀字符 
                nodes[cur]=i;
            }
        }
        int ans=0;
        for(auto& [node,idx]:nodes)
            if(node->count==0)
                ans+=words[idx].size()+1;
        return ans;
    }
};