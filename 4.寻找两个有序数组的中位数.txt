double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n=nums1.size()+nums2.size();
        if(n&1)//按位与 n的最后一位与1算术与 若为1则n为奇数 为0则为偶数
          return findMedian(nums1,nums2,(n>>1)+1);
        else                               //>>为右移 等于除以2
          return (findMedian(nums1,nums2,(n>>1))+findMedian(nums1,nums2,(n>>1)+1))/2.0;
    }
    int findMedian(vector<int>& nums1,vector<int>& nums2,int k)
    {
        assert(0<k<=nums1.size()+nums2.size());//如果条件返回错误，则终止程序执行
        int le=max(0,int(k-nums2.size()));
        int ri=min(k,int(nums1.size()));
        while(le<ri)
        {
            int m=le+(ri-le)/2;
            if(nums2[k-m-1]>nums1[m])
              le=m+1;
            else
              ri=m;
        }
        int nums1LeftMax=le==0?INT_MIN:nums1[le-1];
        int nums2LeftMax=le==k?INT_MIN:nums2[k-le-1];
        return max(nums1LeftMax,nums2LeftMax);
    }
