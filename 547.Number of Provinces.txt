//dfs

class Solution {
public:
    void dfs(vector<vector<int>>& isConnected,vector<int>& visited,int n,int i){
        for(int j=0;j<n;j++){
            if(isConnected[i][j]==1&&!visited[j]){
                visited[j]=1;
                dfs(isConnected,visited,n,j);
            }
        }
    }
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n=isConnected.size();
        int cnt=0;
        vector<int> visited(n,0);
        for(int i=0;i<n;i++){
            if(!visited[i]){
                dfs(isConnected,visited,n,i);
                cnt++;
            }
        }
        return cnt;
    }
};


//bfs

class Solution {
public:
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n=isConnected.size();
        vector<int> visited(n,0);
        queue<int> q;
        int cnt=0;
        for(int i=0;i<n;i++){
            if(!visited[i]){
                cnt++;
                q.push(i);
                while(!q.empty()){
                    int j=q.front();
                    q.pop();
                    for(int k=0;k<n;k++){
                        if(isConnected[j][k]==1&&!visited[k]){
                            visited[k]=1;
                            q.push(k);
                        }
                    }
                }
            }
        }
        return cnt;
    }
};