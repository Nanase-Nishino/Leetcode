//LCA倍增！！！！

class TreeAncestor {
private:
    vector<vector<int>> dp;
public:
    TreeAncestor(int n, vector<int>& parent) :dp(n){
        for(int i=0;i<n;i++)
            dp[i].emplace_back(parent[i]);
        for(int j=1; ;j++)
        {
            bool flag=true; //flag表示在当前列 是否全为-1 若全为-1 则退出
            for(int i=0;i<n;i++)
            {
                int t=dp[i][j-1]!=-1?dp[ dp[i][j-1] ][j-1]:-1;
                dp[i].emplace_back(t);
                if(t!=-1)
                    flag=false;
            }
            if(flag)
                break;
        }
    }
    
    int getKthAncestor(int node, int k) {
        int res=node,pos=0;
        while(k&&res!=-1)
        {
            if(pos>=dp[res].size())
                return -1;
            if(k&1)                 //当k不在2^j序列时 向上查找 跳转！
                res=dp[res][pos];
            k>>=1;                  //体现倍增
            pos++;
        }
        return res;
    }
};

/**
 * Your TreeAncestor object will be instantiated and called as such:
 * TreeAncestor* obj = new TreeAncestor(n, parent);
 * int param_1 = obj->getKthAncestor(node,k);
 */