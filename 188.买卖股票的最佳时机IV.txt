class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        if(!prices.size())
            return 0;
        if(k>=prices.size()/2)
        {
            int sum=0;
            for(int i=1;i<prices.size();i++)
            {
                int val=prices[i]-prices[i-1];
                sum+=(val>0?val:0);
            }
            return sum;
        }
        vector<vector<vector<int>>> dp(k+1,vector<vector<int>>(prices.size()+1,vector<int>(2,0)));
        for(int t=0;t<=k;t++)
            dp[t][0][1]=-1000000;
        for(int i=0;i<prices.size();i++)
            dp[0][i][1]=-1000000;
        for(int t=1;t<=k;t++)
            for(int i=1;i<=prices.size();i++)
            {
                dp[t][i][0]=max(dp[t][i-1][0],dp[t][i-1][1]+prices[i-1]);
                dp[t][i][1]=max(dp[t][i-1][1],dp[t-1][i-1][0]-prices[i-1]);
            }
        return dp[k][prices.size()][0];
    }
};