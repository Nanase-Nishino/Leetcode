class TweetCounts {
public:
    TweetCounts() {

    }
    
    void recordTweet(string tweetName, int time) {
        record[tweetName][time]++;
    }
    
    vector<int> getTweetCountsPerFrequency(string freq, string tweetName, int startTime, int endTime) {
        int f=1;
        f*=(freq=="minute")?60:1;
        f*=(freq=="hour")?60*60:1;
        f*=(freq=="day")?60*60*24:1;

        vector<int> ans;
        int t=startTime;
        while(t<=endTime)
        {
            auto bg=record[tweetName].lower_bound(t);
            auto ed=record[tweetName].upper_bound(min(t+f-1,endTime));
            int cnt=0;
            for(auto it=bg;it!=ed;it++)
              cnt+=it->second;
            ans.push_back(cnt);
            t+=f;
        }
        return ans;
    }
private:
    unordered_map<string,map<int,int>> record;
};

/**
 * Your TweetCounts object will be instantiated and called as such:
 * TweetCounts* obj = new TweetCounts();
 * obj->recordTweet(tweetName,time);
 * vector<int> param_2 = obj->getTweetCountsPerFrequency(freq,tweetName,startTime,endTime);
 */