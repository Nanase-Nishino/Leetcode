//dp
//自下而上

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        if(grid.empty())
            return 0;
        int m=grid.size();
        int n=grid[0].size();
        vector<vector<int>> dp(m+1,vector<int>(n+1,0));
        dp[m-1][n-1]=grid[m-1][n-1];
        for(int i=m-1;i>=0;i--)
            for(int j=n-1;j>=0;j--)
            {
                if(j==n-1&&i==m-1)
                    continue;
                if(j==n-1)
                    dp[i][j]=dp[i+1][j]+grid[i][j];
                else if(i==m-1)
                    dp[i][j]=dp[i][j+1]+grid[i][j];
                else
                    dp[i][j]=min(dp[i+1][j],dp[i][j+1])+grid[i][j];
            }
        return dp[0][0];
    }
};

//dp
//自上而下

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        if(grid.empty())
            return 0;
        int m=grid.size();
        int n=grid[0].size();
        vector<vector<int>> dp(m+1,vector<int>(n+1,0));
        dp[0][0]=grid[0][0];
        for(int i=1;i<m;i++)
            dp[i][0]=dp[i-1][0]+grid[i][0];
        for(int j=1;j<n;j++)
            dp[0][j]=dp[0][j-1]+grid[0][j];
        for(int i=1;i<m;i++)
            for(int j=1;j<n;j++)
                dp[i][j]=min(dp[i-1][j],dp[i][j-1])+grid[i][j];
        return dp[m-1][n-1];
    }
};

