//卡特兰数!!!!!
//C(n+1)=2*C(n)*(2*n+1)/(n+2)

class Solution {
public:
    int numTrees(int n) {
        long C=1;
        for(int i=1;i<n;i++)
            C=C*2*(2*i+1)/(i+2);
        return C;
    }
};

//Dynamic Programming
//G[n]:The number of different BST of an array whose length is N.
//F[i,n]:The number of different BST whose root is i.
//G[n]=F[1,n]+...+F[n,n]
//F[i,n]=G[i-1]*G[n-i]
//G[i-1] is the number of left son array.
//G[n-i] is the number of right son array. 
//G[n]=∑i=1~n G[i-1]*G[n-i].

class Solution {
public:
    int numTrees(int n) {
        vector<int> G(n+1,0);
        G[0]=1;
        G[1]=1;
        for(int i=2;i<=n;i++)
            for(int j=1;j<=i;j++)
                G[i]+=G[j-1]*G[i-j];
        return G[n];
    }
};