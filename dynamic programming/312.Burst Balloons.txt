//每戳破一个气球 会使两个气球从不相邻变成相邻
//逆推就是 每一次过程都是在两个气球中间添加一个气球

//记忆化+DFS
//solve(i,j)表示把区间(i,j)内位置全部填满能够得到的最多硬币
//1.当i>=j-1 solve(i,j)=0
//2.当i<j-1 枚举全部mid 令mid为第一个添加的气球 并进行递归！

//时间复杂度O(n^3)
//空间复杂度O(n^2)

class Solution {
private:
    vector<int> val;
    vector<vector<int>> rec;
    int solve(int left,int right)
    {
        if(left>=right-1)
            return 0;
        if(rec[left][right]!=-1)
            return rec[left][right];
        for(int i=left+1;i<right;i++)
        {
            int sum=val[left]*val[i]*val[right];
            sum+=solve(left,i)+solve(i,right);
            rec[left][right]=max(rec[left][right],sum);
        }
        return rec[left][right];
    }
public:
    int maxCoins(vector<int>& nums) {
        int n=nums.size();
        val.resize(n+2);
        for(int i=1;i<=n;i++)
            val[i]=nums[i-1];
        val[0]=val[n+1]=1;
        rec.resize(n+2,vector<int>(n+2,-1));
        return solve(0,n+1);
    }
};



//dp
//从dfs可以得出dp func
//dfs是自顶向下 dp是自底向上
//所以i的初始条件是n-1 得先求出该区间的所有子区间！

//时间复杂度O(n^3)
//空间复杂度O(n^2)

class Solution {
public:
    int maxCoins(vector<int>& nums) {
        int n=nums.size();
        vector<int> val(n+2);
        val[0]=val[n+1]=1;
        for(int i=1;i<=n;i++)
            val[i]=nums[i-1];
        
        vector<vector<int>> dp(n+2,vector<int>(n+2,0));
        for(int i=n-1;i>=0;i--)
            for(int j=i+2;j<=n+1;j++)
                for(int k=i+1;k<j;k++)
                {
                    int sum=val[i]*val[k]*val[j]+dp[i][k]+dp[k][j];
                    dp[i][j]=max(dp[i][j],sum);
                }
        return dp[0][n+1];
    }
};