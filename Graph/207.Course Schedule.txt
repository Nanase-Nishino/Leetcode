//Topological Sorting
//DAG: directed-graph

//DFS
class Solution {
private:
    vector<vector<int>> edges;
    vector<int> visited;
    bool invalid=false;
public:
    void dfs(int u)
    {
        visited[u]=1;
        for(int v:edges[u])
        {
            if(visited[v]==0)
            {
                dfs(v);
                if(invalid)
                    return;
            }
            else if(visited[v]==1)
            {
                invalid=true;
                return;
            }
        }
        visited[u]=2;
    }
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        edges.resize(numCourses);
        visited.resize(numCourses);

        for(const auto info:prerequisites)
            edges[info[1]].emplace_back(info[0]);

        for(int i=0;i<numCourses;i++)
            if(visited[i]==0)
                dfs(i);
        
        return invalid?false:true;
    }
};

//BFS
class Solution {
private:
    vector<vector<int>> edges;
    vector<int> indeg;
    vector<int> result;
public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        edges.resize(numCourses);
        indeg.resize(numCourses);

        for(const auto info:prerequisites)
        {
            edges[info[1]].emplace_back(info[0]);
            ++indeg[info[0]];
        }

        queue<int> q;

        for(int i=0;i<numCourses;i++)
            if(indeg[i]==0)
                q.push(i);

        while(!q.empty())
        {
            int u=q.front();
            q.pop();
            result.emplace_back(u);
            for(int v:edges[u])
            {
                --indeg[v];
                if(indeg[v]==0)
                    q.push(v);
            }
        }
        if(result.size()==numCourses)
            return true;
        return false;
    }
};