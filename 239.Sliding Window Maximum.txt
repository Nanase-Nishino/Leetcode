//   For an array of length N and an sliding window of length K,
// the number of sliding windows is n-k+1.

//   Finding the maximum value of array is usually solved by priority array.

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        priority_queue<pair<int,int>> q;
        for(int i=0;i<k;i++){
            q.emplace(nums[i],i);
        }
        vector<int> res{q.top().first};
        for(int i=k;i<nums.size();i++){
            q.emplace(nums[i],i);
            while(q.top().second<=i-k){
                q.pop();
            }
            res.emplace_back(q.top().first);
        }
        return res;
    }
};


//   Store array index in an deque
//   let the new element compare with the tail element when it joins deque,
// if the tail element is smaller than the new element,it must be removed.
//   Remove the left element at the head of deque.

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int N=nums.size();
        deque<int> q;
        for(int i=0;i<k;i++){
            while(!q.empty()&&nums[i]>=nums[q.back()]){
                q.pop_back();
            }
            q.push_back(i);
        }
        vector<int> res{nums[q.front()]};
        for(int i=k;i<N;i++){
            while(!q.empty()&&nums[i]>=nums[q.back()]){
                q.pop_back();
            }
            q.push_back(i);
            while(q.front()<=i-k){
                q.pop_front();
            }
            res.emplace_back(nums[q.front()]);
        }
        return res;
    }
};


//   