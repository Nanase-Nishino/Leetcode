//µÝ¹é
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> v;
    void dfs(TreeNode *x)
    {
        if(!x)
            return;
        dfs(x->left);
        dfs(x->right);
        v.push_back(x->val);
    }
    vector<int> postorderTraversal(TreeNode* root) {
        dfs(root);
        return v;
    }
};

//µü´ú
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> v;
        stack<TreeNode*> s;
        TreeNode *p=root;
        TreeNode *pre=nullptr;
        while(p!=NULL||!s.empty())
        {
            while(p!=NULL)
            {
                s.push(p);
                p=p->left;
            }
            p=s.top();
            if(p->right==NULL||p->right==pre)
            {
                v.push_back(p->val);
                s.pop();
                pre=p;
                p=nullptr;
            }
            else
                p=p->right;
        }
        return v;
    }
};