//∂”¡–
class Solution {
public:
    vector<string> letterCombinations(string digits) {
        vector<string> v{"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
        queue<string> q;
        int cnt=0;
        for(int i=0;i<digits.size();i++)
        {
            if(q.empty())
            {
                for(auto x:v[digits[i]-'0'])
                {
                    string tem;
                    tem.push_back(x);
                    q.push(tem);
                }
                cnt=q.size();
            }
            else
            {
                for(int j=0;j<cnt;j++)
                {
                    string ss=q.front();
                    q.pop();
                    for(auto x:v[digits[i]-'0'])
                    {
                        string tem=ss;
                        tem.push_back(x);
                        q.push(tem);
                    }
                }
                cnt=q.size();
            }
        }
        vector<string> res;
        while(!q.empty())
        {
            res.push_back(q.front());
            q.pop();
        }
        return res; 

    }
};

//DFSªÿÀ›

class Solution {
private:
    void dfs(string& digits,int pos,string& temp,vector<string>& res,unordered_map<char,string>& mp)
    {
        if(pos==digits.size())
        {
            res.emplace_back(temp);
            return;
        }
        else
        {
            string str=mp[digits[pos]];
            for(int i=0;i<str.size();i++)
            {
                temp.push_back(str[i]);
                dfs(digits,pos+1,temp,res,mp);
                temp.pop_back();
            }
        }
    }
public:
    vector<string> letterCombinations(string digits) {
        if(!digits.size())
            return {};
        unordered_map<char,string> mp{
            {'2',"abc"},
            {'3',"def"},
            {'4',"ghi"},
            {'5',"jkl"},
            {'6',"mno"},
            {'7',"pqrs"},
            {'8',"tuv"},
            {'9',"wxyz"}
        };
        vector<string> res;
        string temp="";
        dfs(digits,0,temp,res,mp);
        return res;
    }
};