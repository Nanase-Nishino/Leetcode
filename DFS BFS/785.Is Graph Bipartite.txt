//染色法！

//DFS
class Solution {
private:
    static constexpr int UNCOLORED=0;
    static constexpr int RED=1;
    static constexpr int GREEN=2;
    vector<int> color;
    bool valid;

    void dfs(int node, int c, const vector<vector<int>>& graph)
    {
        color[node]=c;
        int cNei= (c==RED?GREEN:RED);
        for(int nei:graph[node])
        {
            if(color[nei]==UNCOLORED)
            {
                dfs(nei,cNei,graph);
                if(!valid)
                    return;
            }
            else if(color[nei]!=cNei)
            {
                valid=false;
                return;
            }
        }
    }
public:
    bool isBipartite(vector<vector<int>>& graph) {
        int n=graph.size();
        valid=true;
        color.assign(n,UNCOLORED);
        for(int i=0;i<n&&valid;i++)
            if(color[i]==UNCOLORED)
                dfs(i,RED,graph);
        return valid;
    }
};

//BFS
class Solution {
private:
    static constexpr int UNCOLORED=0;
    static constexpr int RED=1;
    static constexpr int GREEN=2;
    vector<int> color;
public:
    bool isBipartite(vector<vector<int>>& graph) {
        int n=graph.size();
        color.assign(n,UNCOLORED);
        queue<int> q;
        for(int i=0;i<n;i++)
        {
            if(color[i]==UNCOLORED)
            {
                q.push(i);
                color[i]=RED;
                while(!q.empty())
                {
                    int node=q.front();
                    q.pop();
                    int cNei=(color[node]==RED?GREEN:RED);
                    for(int nei:graph[node])
                    {
                        if(color[nei]==UNCOLORED)
                        {
                            q.push(nei);
                            color[nei]=cNei;
                        }
                        else if(color[nei]!=cNei)
                            return false;                        
                    }
                }
            }
        }
        return true;
    }
};