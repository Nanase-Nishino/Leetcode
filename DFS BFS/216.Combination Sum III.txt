//回溯

class Solution {
private:
    vector<int> temp;
    vector<vector<int>> Sol;
    void dfs(int k,int rest,int start)
    {
        if(rest==0&&temp.size()==k)
        {
            Sol.emplace_back(temp);
            return;
        }
        if(temp.size()==k||rest<start)
            return;

        //选择
        for(int i=start+1;i<10;i++)
        {
            temp.emplace_back(i);
            dfs(k,rest-i,i);
            temp.pop_back();
        }
    }
public:
    vector<vector<int>> combinationSum3(int k, int n) {
        dfs(k,n,0);
        return Sol;
    }
};

//二进制枚举

class Solution {
private:
    vector<int> temp;
    vector<vector<int>> Sol;
    bool check(int mask,int k,int n)
    {
        temp.clear();
        for(int i=0;i<9;i++)
        {
            if((1<<i)&mask)
                temp.emplace_back(i+1);
        }
        return temp.size()==k&&accumulate(temp.begin(),temp.end(),0)==n;
    }
public:
    vector<vector<int>> combinationSum3(int k, int n) {
        for(int mask=0;mask<(1<<9);mask++)
        {
            if(check(mask,k,n))
                Sol.emplace_back(temp);
        }
        return Sol;
    }
};