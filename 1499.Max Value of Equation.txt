/*
   题目要求求解yi+yj+|xi-xj|,化简可得 yi-xi+yj+xj,限制条件为xj-xi<=k
   枚举所有点,对于每一个点,在限制条件下查找区间的最大值yi-xi
*/

//红黑树
//线段树

//优先队列

class Solution {
public:
    int findMaxValueOfEquation(vector<vector<int>>& points, int k) {
        priority_queue<pair<int,int>> pq;
        pq.push({points[0][1]-points[0][0],points[0][0]});
        int res=INT_MIN;
        for(int i=1;i<points.size();i++)
        {
            while(!pq.empty()&&points[i][0]-pq.top().second>k)
                pq.pop();
            if(!pq.empty())
                res=max(res,points[i][1]+points[i][0]+pq.top().first);
            pq.push({points[i][1]-points[i][0],points[i][0]});
        }
        return res;
    }
};

//单调队列
//按照y-x递减的单调队列获取区间最大值
//插入时把队尾y-x<=points[i][1]-points[i][0]的元素删掉

class Solution {
public:
    int findMaxValueOfEquation(vector<vector<int>>& points, int k) {
        deque<pair<int,int>> pq;
        pq.push_front({points[0][1]-points[0][0],points[0][0]});
        int res=INT_MIN;
        for(int i=1;i<points.size();i++)
        {
            while(!pq.empty()&&points[i][0]-pq.front().second>k)
                pq.pop_front();
            if(!pq.empty())
                res=max(res,points[i][1]+points[i][0]+pq.front().first);
            while(!pq.empty()&&pq.back().first<=points[i][1]-points[i][0])
                pq.pop_back();
            pq.push_back({points[i][1]-points[i][0],points[i][0]});
        }
        return res;
    }
};