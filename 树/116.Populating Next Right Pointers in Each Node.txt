class Solution {
public:
    Node* connect(Node* root) {
        if(!root)
            return root;
        queue<Node*> q;
        q.emplace(root);
        while(!q.empty()){
            int size=q.size();
            for(int i=0;i<size;i++){
                Node* cur=q.front();
                q.pop();
                if(i<size-1){
                    cur->next=q.front();
                }
                if(cur->left)
                    q.emplace(cur->left);
                if(cur->right)
                    q.emplace(cur->right);
            }
        }
        return root;
    }
};

//空间O(1)

class Solution {
public:
    Node* connect(Node* root) {
        if(!root)
            return root;
        Node* x=root;
        //x->left有下一层!
        while(x->left){
            Node* head=x;
            while(head){
                head->left->next=head->right;
                if(head->next){
                    head->right->next=head->next->left;
                }
                head=head->next;
            }
            //移动到下一层
            x=x->left;
        }
        return root;
    }
};
