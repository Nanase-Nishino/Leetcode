/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

//BFS


class Solution {
public:
    vector<double> averageOfLevels(TreeNode* root) {
        if(!root)
            return {};
        vector<double> res;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty())
        {
            double cur=0,N=q.size();
            for(int i=N;i>=1;i--)
            {
                TreeNode* tem=q.front();q.pop();
                cur+=tem->val;
                if(tem->left)   q.push(tem->left);
                if(tem->right)  q.push(tem->right);
            }
            res.emplace_back(cur/N);
        }
        return res;
    }
};

//DFS

class Solution {
private:
    void dfs(TreeNode* root,int level,vector<double>& cnt,vector<double>& sum)
    {
        if(!root)
            return;
        if(level>=sum.size())
        {
            cnt.emplace_back(0);
            sum.emplace_back(0);
        }
        sum[level]+=1.0*root->val;
        cnt[level]+=1.0;
        dfs(root->left,level+1,cnt,sum);
        dfs(root->right,level+1,cnt,sum);
    }
public:
    vector<double> averageOfLevels(TreeNode* root) {
        vector<double> cnt,sum;
        vector<double> ans;
        dfs(root,0,cnt,sum);
        for(int i=0;i<sum.size();i++)
            ans.emplace_back(sum[i]/cnt[i]);
        return ans;
    }
};