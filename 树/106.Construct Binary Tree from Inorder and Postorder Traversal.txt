//recursion

class Solution {
private:
    unordered_map<int,int> pos;
    TreeNode* myBuildTree(const vector<int>& inorder,const vector<int>& postorder,
                          int inorder_left,int inorder_right,int postorder_left,int postorder_right)
    {
        if(postorder_left>postorder_right)
            return nullptr;
        TreeNode* root=new TreeNode(postorder[postorder_right]);
        int size_left_subtree=pos[postorder[postorder_right]]-inorder_left;
        root->left=myBuildTree(inorder,postorder,inorder_left,pos[postorder[postorder_right]]-1,postorder_left,postorder_left+size_left_subtree-1);
        root->right=myBuildTree(inorder,postorder,pos[postorder[postorder_right]]+1,inorder_right,postorder_left+size_left_subtree,postorder_right-1);
        return root;
    }
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        if(!postorder.size())
            return nullptr;
        int N=inorder.size();
        for(int i=0;i<N;i++)
            pos[inorder[i]]=i;
        return myBuildTree(inorder,postorder,0,N-1,0,N-1);
    }
};